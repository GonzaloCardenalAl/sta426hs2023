col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdifl] = 0
upset(DEgenesdif, sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
upset(DEgenesdif, sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
upset(DEgenesdif, sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
DEgenes<- decideTests(fit2)
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <- DEgenes
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdifl] = 0
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <- DEgenes
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdifl] = 0
upset(as.data.frame(DEgenesdif), sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
?class()
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <- DEgenes
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdifl] = 0
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <- DEgenes
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdif] = 0
#Now we plot the upset
upset(as.data.frame(DEgenesdif), sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x > 0, 0, x)))
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x < 0, 1, x)))
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
#Now we plot the upset
upset(DEgenesdif, sets = colnames(DEgenesdif), order.by = "freq")
DEgenes<- as.data.frame(decideTests(fit2))
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x > 0, 0, x)))
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x < 0, 1, x)))
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
#Now we plot the upset
upset(DEgenesdif, sets = colnames(DEgenesdif), order.by = "freq")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x > 0, 0, x)))
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x < 0, 1, x)))
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
#Now we plot the upset
upset(DEgenesdif, sets = colnames(DEgenesdif), order.by = "freq")
#Now we plot the upset
upset(DEgenesdif, sets = colnames(DEgenesdif), order.by = "freq")
Get DE genes with default threshold value
#Get DE genes with default threshold value
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x > 0, 0, x)))
DEgenesdownregulated <-  data.frame(lapply(DEgenes, function(x) ifelse(x < 0, 1, x)))
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
#Now we plot the upset
upset(DEgenesdif, sets = colnames(DEgenesdif), order.by = "freq")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <- DEgenes
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdif] = 0
#Now we plot the upset
upset(as.data.frame(DEgenesdif), sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes_alternative_design<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <-DEgenes_alternative_design
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <-DEgenes_alternative_design
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif_alternative_design <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif_alternative_design[DEgenesdif_alternative_design] = 1
DEgenesdif_alternative_design[!DEgenesdif_alternative_design] = 0
#Now we plot the upset
upset(as.data.frame(DEgenesdif_alternative_design), sets = colnames(as.data.frame(DEgenesdif_alternative_design)), order.by = "freq")
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(Pvalue_Voom=-log(topDE_vf$P.Val), Pvalue_EdgeR=-log(topDE_lrt[,4]))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(limma) # replace this with packages you will use
library(UpSetR)
library("affy")
library("preprocessCore")
library(ggplot2)
library("edgeR")
# Chunk 3
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <- DEgenes
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <- DEgenes
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif[DEgenesdif] = 1
DEgenesdif[!DEgenesdif] = 0
#Now we plot the upset
upset(as.data.frame(DEgenesdif), sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
# Chunk 4
# create design matrix
design <- model.matrix(~f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10",
E48="present48-absent48",
Time="absent48",levels=design)
cont.matrix
# Chunk 5
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Get DE genes with default threshold value
DEgenes_alternative_design<- as.data.frame(decideTests(fit2))
#Separate the downregulated genes and the upregulated genes
DEgenesupregulated <-DEgenes_alternative_design
DEgenesupregulated <- DEgenesupregulated == 1
col_genesupregulated <- c("E10UpReg", "E48UpReg", "TimeUpReg")
colnames(DEgenesupregulated) <- col_genesupregulated
DEgenesdownregulated <-DEgenes_alternative_design
DEgenesdownregulated  <- DEgenesdownregulated == -1
col_genesdownregulated <- c("E10DownReg", "E48DownReg", "TimeDownReg")
colnames(DEgenesdownregulated) <- col_genesdownregulated
DEgenesdif_alternative_design <- cbind(DEgenesupregulated, DEgenesdownregulated)
DEgenesdif_alternative_design[DEgenesdif_alternative_design] = 1
DEgenesdif_alternative_design[!DEgenesdif_alternative_design] = 0
#Now we plot the upset
upset(as.data.frame(DEgenesdif_alternative_design), sets = colnames(as.data.frame(DEgenesdif_alternative_design)), order.by = "freq")
# Chunk 6
samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE)
samples
# Chunk 7
setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_7/data/")
counts <- readDGE(samples$countfile)$counts
head(counts)
# Chunk 8
(grp <- gsub("\\-.[0-9]*","",colnames(counts)))
# Chunk 10
mds <- plotMDS(counts, plot=FALSE)
MDSdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y, Treatment = grp)
ggplot(MDSdf, aes(x = MDS1, y = MDS2, color = Treatment)) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling", x='Leading logFC dim 1 (99%)', y='Leading logFC dim 2 (1%)')+
theme(plot.title = element_text(hjust = 0.5))
# Chunk 11
group <- grp
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design <- model.matrix(~group)
y <- estimateDisp(y,design)
# Chunk 12
plotBCV(y)
# Chunk 13
#To perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
# Chunk 14
plotSmear(lrt)
# Chunk 15
setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_7/data/")
counts <- readDGE(samples$countfile)$counts
group <- grp
plotMDS(counts)
mds <- plotMDS.DGEList(counts, plot=FALSE)
MDSdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y, Treatment = grp, Type="DGElist object")
# Chunk 16
counts_norm <- cpm(counts)
plotMDS(counts_norm)
mds_norm <- plotMDS(counts_norm, plot=FALSE)
MDSdf_norm <- data.frame(MDS1 = mds_norm$x, MDS2 = mds_norm$y, Treatment = grp, Type="Normalized counts")
# Chunk 17
MDStotaldf <- rbind(MDSdf,MDSdf_norm)
ggplot(MDStotaldf, aes(x = MDS1, y = MDS2, color = Treatment, shape = Type)) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling: DGE list vs Normalized counts", x='MDS1', y='MD2')+
theme(plot.title = element_text(hjust = 0.5))
# Chunk 18
MDStotaldf <- rbind(MDSdf,MDSdf_norm)
ggplot(MDStotaldf, aes(x = MDS1, y = MDS2, color = Treatment, shape = Type)) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling: DGE list vs Normalized counts axes limit:[-2,2]", x='MDS1', y='MD2')+
theme(plot.title = element_text(hjust = 0.5)) +
xlim(-2, 2) +
ylim(-2, 2)
# Chunk 19
counts_norm <- cpm(counts, log = TRUE)
mds_norm <- plotMDS(counts_norm, plot=FALSE)
MDSdf_norm <- data.frame(MDS1 = mds_norm$x, MDS2 = mds_norm$y, Treatment = grp, Type="Log Normalized counts")
MDStotaldf <- rbind(MDSdf,MDSdf_norm)
ggplot(MDStotaldf, aes(x = MDS1, y = MDS2, color = Treatment, shape = Type)) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling: DGE list vs Log Normalized counts", x='MDS1', y='MD2')+
theme(plot.title = element_text(hjust = 0.5))
# Chunk 21
v <- voom(DGEList(counts=counts, group= grp), design=model.matrix(~grp), plot = TRUE)
vf = lmFit(v, design = model.matrix(~grp))  # note similarity to limma
# analysis performed earlier
vf = eBayes(vf)
#Plot estimated fold changes limma-voom vs edgeR
topDE_vf <- topTable(vf, n = Inf)
topDE_lrt <- topTags(lrt, n = Inf)
topDE_lrt <- as.data.frame(topDE_lrt)
#topDE_lrt <- topDE_lrt[rownames(topDE_vf),]
topDE_vf <- topDE_vf[rownames(topDE_lrt),]
top_DE_vf_logFC<- data.frame(genes = rownames(topDE_vf), logFC=topDE_vf$logFC, Method = 'Voom')
top_DE_lrt_logFC<- data.frame(genes = rownames(topDE_vf),logFC=topDE_lrt$logFC, Method = 'EdgeR')
logFCdf <- rbind(top_DE_vf_logFC, top_DE_lrt_logFC)
ggplot(logFCdf, aes(x = genes, y= logFC,fill = Method)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of LogFC from EdgeR and Voom",
x = "Gene IDs",
y = 'LogFC') +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 22
only_logFC <- data.frame(logFC_Voom=topDE_vf$logFC, logFC_EdgeR=topDE_lrt$logFC)
ggplot(only_logFC, aes(x = logFC_Voom, y= logFC_EdgeR)) +
geom_point(fill = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, color = "orange")+
labs(title = "Comparison of LogFC from EdgeR and Voom")+
theme(plot.title = element_text(hjust = 0.5))
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(Pvalue_Voom=-log(topDE_vf$P.Val), Pvalue_EdgeR=-log(topDE_lrt[,4]))
ggplot(only_logP, aes(x = logFC_Voom, y= logFC_EdgeR)) +
geom_point(fill = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, color = "orange")+
labs(title = "Comparison of P-value from EdgeR and Voom")+
theme(plot.title = element_text(hjust = 0.5))
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(Pvalue_Voom=-log(topDE_vf$P.Val), Pvalue_EdgeR=-log(topDE_lrt[,4]))
ggplot(only_logP, aes(x = Pvalue_Voom, y= Pvalue_EdgeR)) +
geom_point(fill = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, color = "orange")+
labs(title = "Comparison of P-value from EdgeR and Voom")+
theme(plot.title = element_text(hjust = 0.5))
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(-log_Pvalue_Voom=-log(topDE_vf$P.Val), -log_Pvalue_EdgeR=-log(topDE_lrt[,4]))
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(negative_log_Pvalue_Voom=-log(topDE_vf$P.Val), -log_Pvalue_EdgeR=negative_log(topDE_lrt[,4]))
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(negative_log_Pvalue_Voom=-log(topDE_vf$P.Val), negative_Pvalue_EdgeR=-log(topDE_lrt[,4]))
ggplot(only_logP, aes(x = negative_log_Pvalue_Voom, y= negative_log_Pvalue_EdgeR)) +
geom_point(fill = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, color = "orange")+
labs(title = "Comparison of P-value from EdgeR and Voom")+
theme(plot.title = element_text(hjust = 0.5))
#Compare the P-values limma-voom vs edgeR
only_logP <- data.frame(negative_log_Pvalue_Voom=-log(topDE_vf$P.Val), negative_log_Pvalue_EdgeR=-log(topDE_lrt[,4]))
ggplot(only_logP, aes(x = negative_log_Pvalue_Voom, y= negative_log_Pvalue_EdgeR)) +
geom_point(fill = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, color = "orange")+
labs(title = "Comparison of P-value from EdgeR and Voom")+
theme(plot.title = element_text(hjust = 0.5))
