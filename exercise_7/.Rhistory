# hvg <- row.names(sce)[order(vst$gene_attr$residual_variance,
#                             decreasing=TRUE)[1:1000]]
# run PCA
sce <- runPCA(sce, ncomponents=50, subset_row=hvg)
#How many componentes do you take? before the used the elbo, but it is not a good way to proceed.
# check the variance explained by the PCs:
pc.var <- attr(reducedDim(sce),"percentVar")
plot(pc.var, xlab="PCs", ylab="% variance explained")
# restrict to the first 20 components:
reducedDim(sce) <- reducedDim(sce)[,1:20]
# run and plot 2d projections based on the PCA
# to improve performance, use Annoy kNN approximation:
sce <- runTSNE(sce, dimred="PCA", BNPARAM=AnnoyParam())
sce <- runUMAP(sce, dimred="PCA", n_neighbors=30, BNPARAM=AnnoyParam())
# you can compare the 2d embeddings:
# sleepwalk::sleepwalk( as.list(reducedDims(sce)[c("TSNE","UMAP")]),
#                       featureMatrices=reducedDims(sce)[["PCA"]] )
#it is an impossible task to do not introduce distorsions in these methods of dimensionality reduction.  Because to perserve the neighbours of one cell, you need to disturb the others.
# plot by doublet score
plotUMAP(sce, colour_by="scDblFinder.score") +
plotTSNE(sce, colour_by="scDblFinder.score") +
plot_layout(guides = "collect")
# filter out bad cells
sce <- sce[,sce$scDblFinder.class!="doublet" & !sce$qc.out]
# check mixing:
plotTSNE(sce, colour_by="group_id") +
plotTSNE(sce, colour_by="sample_id") +
plot_layout(guides = "collect")
# BiocNeighbors
g <- buildKNNGraph(sce, BNPARAM=AnnoyParam(), use.dimred="PCA", k=30)
sce$cluster <- as.factor(cluster_leiden(g, objective_function="modularity",
n_iterations=20)$membership)
table(sce$cluster)
# we could play with the `resolution_parameter` of `cluster_leiden`
# to decide on the granularity
plotTSNE(sce, colour_by="cluster", text_by="cluster") +
plotUMAP(sce, colour_by="cluster", text_by="cluster")
ca <- table(cluster=sce$cluster, sample=sce$sample_id)
ggplot(as.data.frame(ca), aes(reorder(sample), cluster, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_viridis_c()
# we identify genes that differ between clusters:
mm <- scran::findMarkers(sce, groups=sce$cluster, test.type="binom",
BPPARAM=MulticoreParam(6))
# we select the top 5 markers by cluster:
markers <- unique(unlist(lapply(mm, FUN=function(x){
head(row.names(x[x$FDR<0.01,]),5)
})))
genes <- list(
astrocytes = c("Aqp4", "Gfap", "Fgfr3","Dio2"),
endothelial = c("Cldn5","Nostrin","Flt1"),
microglia = c("C1qb","Tyrobp","P2ry12", "Csf1r"),
neuronal = c("Snap25", "Stmn2", "Syn1", "Rbfox3"),
excNeuron = c("Slc17a7","Camk2a","Grin2b","Fezf2"),
inhNeuron = c("Gad1","Lhx6","Adarb2"),
oligodendro = c("Opalin","Plp1","Mag","Mog"),
OPC = c("Pdgfra","Sox6","Bcan")
)
# since the row.names of the object have also the ensembl id, we find the matching row names for each gene:
km <- lapply(genes, FUN=function(g) grep(paste0(g, "$", collapse="|"), rownames(sce), value=TRUE))
# muscat
# mean logcounts by cluster:
pb <- aggregateData(sce, "logcounts", by=c("cluster"), fun="mean")
assayNames(pb) <- "logcounts"
assays(pb)$propOfMax <- exp(logcounts(pb))/rowMaxs(exp(logcounts(pb)))
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0) +
sechm(pb, c(unlist(km)), assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# heatmap for the de-novo markers:
sechm(pb, markers, assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# we get rid of the unspecific neuronal markers:
km2 <- km[names(km)!="neuronal"]
# we extract the pseudo-bulk counts of the markers for each cluster
mat <- assay(pb)[unlist(km2),]
# we aggregate across markers of the same type
mat <- aggregate(t(scale(t(mat))),
by=list(type=rep(names(km2), lengths(km2))),
FUN=sum)
# for each column (cluster), we select the row (cell type) which has the maximum aggregated value
cl2 <- mat[,1][apply(mat[,-1], 2, FUN=which.max)]
# we convert the cells' cluster labels to cell type labels:
sce$cluster2 <- cl2[sce$cluster]
table(sce$cluster, sce$cluster2)
plotUMAP(sce, colour_by="cluster2", text_by="cluster2")
# we aggregate again to pseudo-bulk using the new clusters
pb <- aggregateData(sce, "logcounts", by=c("cluster2"), fun="mean")
assayNames(pb) <- "logcounts"
# and we plot again the expression of the markers as a sanity check
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0)
plotTSNE(sce, colour_by="cluster2", text_by="cluster2")
saveRDS(sce, file="week13.SCE.processed.rds")
# muscat
# mean logcounts by cluster:
pb <- aggregateData(sce, "logcounts", by=c("cluster"), fun="mean")
assayNames(pb) <- "logcounts"
assays(pb)$propOfMax <- exp(logcounts(pb))/rowMaxs(exp(logcounts(pb)))
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0) +
sechm(pb, c(unlist(km)), assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
sce <- readRDS("week13.SCE.rds")
dim(sce)
assays(sce)$counts
table(sce$sample_id, sce$group_id)
# (fast) standard log-normalization
sce <- logNormCounts(sce)
# get high-variable genes (normally we'd take 3000, here we'll go skim for speed)
hvg <- getTopHVGs(sce, n=1000)
# alternative: variance-stabilizing transformation
# vst <- suppressWarnings(sctransform::vst(counts(sce)))
# logcounts(sce) <- vst$y
# # get highly-variable genes
# hvg <- row.names(sce)[order(vst$gene_attr$residual_variance,
#                             decreasing=TRUE)[1:1000]]
# run PCA
sce <- runPCA(sce, ncomponents=50, subset_row=hvg)
#How many componentes do you take? before the used the elbo, but it is not a good way to proceed.
# check the variance explained by the PCs:
pc.var <- attr(reducedDim(sce),"percentVar")
plot(pc.var, xlab="PCs", ylab="% variance explained")
```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran) # sc analysis
library(scater) # sc QC and plotting
library(batchelor) # batch correction methods
library(scDblFinder) # doublet detection
# library(sctransform) # variance-stabilizing transformation (optional)
library(muscat) # differential expression analysis
library(BiocParallel) # handling multi-threading
library(BiocNeighbors) # specifying params for kNN
library(igraph) # for manual graph clustering
library(sechm) # plotting
library(ggplot2) # plotting
library(patchwork) # to combine
library(grid)
})
sce <- readRDS("week13.SCE.rds")
dim(sce)
assays(sce)$counts
table(sce$sample_id, sce$group_id)
mito <- grep("mt-", rownames(sce), value = TRUE)
head(mito)
# get QC metrics:
sce <- addPerCellQC(sce, subsets=list(Mt=mito), percent.top=c(5,10))
sce <- addPerFeatureQC(sce)
# we plot some of the metrics
qc <- as.data.frame(colData(sce))
ggplot(qc, aes(subsets_Mt_percent)) + geom_histogram() + facet_wrap(~sample_id)
ggplot(qc, aes(log10(sum))) + geom_histogram() + facet_wrap(~sample_id)
ggplot(qc, aes(log10(sum), log10(detected))) + geom_point() + geom_density2d()
# we set thresholds on the library sizes and detection rate:
sce$qc.out <- isOutlier(log(sce$sum),nmads=3,batch=sce$sample_id) |
isOutlier(log(sce$detected),nmads=3,batch=sce$sample_id)
# a fancier job would be accomplished by https://github.com/wmacnair/SampleQC
table(sce$qc.out)
# get rid of seldom detected genes
sce <- sce[rowData(sce)$detected>=4,]
# we flag doublets: doublets are droplets that capture more than one cell and this might be a problem when it captures more than one cell-type
sce <- scDblFinder(sce, samples="sample_id", BPPARAM=MulticoreParam(6))
table(sce$scDblFinder.class)
# (fast) standard log-normalization
sce <- logNormCounts(sce)
# get high-variable genes (normally we'd take 3000, here we'll go skim for speed)
hvg <- getTopHVGs(sce, n=1000)
# alternative: variance-stabilizing transformation
# vst <- suppressWarnings(sctransform::vst(counts(sce)))
# logcounts(sce) <- vst$y
# # get highly-variable genes
# hvg <- row.names(sce)[order(vst$gene_attr$residual_variance,
#                             decreasing=TRUE)[1:1000]]
# run PCA
sce <- runPCA(sce, ncomponents=50, subset_row=hvg)
#How many componentes do you take? before the used the elbo, but it is not a good way to proceed.
# check the variance explained by the PCs:
pc.var <- attr(reducedDim(sce),"percentVar")
plot(pc.var, xlab="PCs", ylab="% variance explained")
# restrict to the first 20 components:
reducedDim(sce) <- reducedDim(sce)[,1:20]
# run and plot 2d projections based on the PCA
# to improve performance, use Annoy kNN approximation:
sce <- runTSNE(sce, dimred="PCA", BNPARAM=AnnoyParam())
sce <- runUMAP(sce, dimred="PCA", n_neighbors=30, BNPARAM=AnnoyParam())
# you can compare the 2d embeddings:
# sleepwalk::sleepwalk( as.list(reducedDims(sce)[c("TSNE","UMAP")]),
#                       featureMatrices=reducedDims(sce)[["PCA"]] )
#it is an impossible task to do not introduce distorsions in these methods of dimensionality reduction.  Because to perserve the neighbours of one cell, you need to disturb the others.
# plot by doublet score
plotUMAP(sce, colour_by="scDblFinder.score") +
plotTSNE(sce, colour_by="scDblFinder.score") +
plot_layout(guides = "collect")
# filter out bad cells
sce <- sce[,sce$scDblFinder.class!="doublet" & !sce$qc.out]
# check mixing:
plotTSNE(sce, colour_by="group_id") +
plotTSNE(sce, colour_by="sample_id") +
plot_layout(guides = "collect")
# BiocNeighbors
g <- buildKNNGraph(sce, BNPARAM=AnnoyParam(), use.dimred="PCA", k=30)
sce$cluster <- as.factor(cluster_leiden(g, objective_function="modularity",
n_iterations=20)$membership)
table(sce$cluster)
# we could play with the `resolution_parameter` of `cluster_leiden`
# to decide on the granularity
plotTSNE(sce, colour_by="cluster", text_by="cluster") +
plotUMAP(sce, colour_by="cluster", text_by="cluster")
ca <- table(cluster=sce$cluster, sample=sce$sample_id)
ggplot(as.data.frame(ca), aes(reorder(sample), cluster, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_viridis_c()
# we identify genes that differ between clusters:
mm <- scran::findMarkers(sce, groups=sce$cluster, test.type="binom",
BPPARAM=MulticoreParam(6))
# we select the top 5 markers by cluster:
markers <- unique(unlist(lapply(mm, FUN=function(x){
head(row.names(x[x$FDR<0.01,]),5)
})))
genes <- list(
astrocytes = c("Aqp4", "Gfap", "Fgfr3","Dio2"),
endothelial = c("Cldn5","Nostrin","Flt1"),
microglia = c("C1qb","Tyrobp","P2ry12", "Csf1r"),
neuronal = c("Snap25", "Stmn2", "Syn1", "Rbfox3"),
excNeuron = c("Slc17a7","Camk2a","Grin2b","Fezf2"),
inhNeuron = c("Gad1","Lhx6","Adarb2"),
oligodendro = c("Opalin","Plp1","Mag","Mog"),
OPC = c("Pdgfra","Sox6","Bcan")
)
# since the row.names of the object have also the ensembl id, we find the matching row names for each gene:
km <- lapply(genes, FUN=function(g) grep(paste0(g, "$", collapse="|"), rownames(sce), value=TRUE))
# muscat
# mean logcounts by cluster:
pb <- aggregateData(sce, "logcounts", by=c("cluster"), fun="mean")
assayNames(pb) <- "logcounts"
assays(pb)$propOfMax <- exp(logcounts(pb))/rowMaxs(exp(logcounts(pb)))
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0) +
sechm(pb, c(unlist(km)), assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# heatmap for the de-novo markers:
sechm(pb, markers, assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# we get rid of the unspecific neuronal markers:
km2 <- km[names(km)!="neuronal"]
# we extract the pseudo-bulk counts of the markers for each cluster
mat <- assay(pb)[unlist(km2),]
# we aggregate across markers of the same type
mat <- aggregate(t(scale(t(mat))),
by=list(type=rep(names(km2), lengths(km2))),
FUN=sum)
# for each column (cluster), we select the row (cell type) which has the maximum aggregated value
cl2 <- mat[,1][apply(mat[,-1], 2, FUN=which.max)]
# we convert the cells' cluster labels to cell type labels:
sce$cluster2 <- cl2[sce$cluster]
table(sce$cluster, sce$cluster2)
plotUMAP(sce, colour_by="cluster2", text_by="cluster2")
# we aggregate again to pseudo-bulk using the new clusters
pb <- aggregateData(sce, "logcounts", by=c("cluster2"), fun="mean")
assayNames(pb) <- "logcounts"
# and we plot again the expression of the markers as a sanity check
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0)
plotTSNE(sce, colour_by="cluster2", text_by="cluster2")
# we aggregate by cluster x sample to perform pseudo-bulk differential state analysis
sce <- muscat::prepSCE(sce, kid="cluster2", sid = "sample_id",
gid = "group_id")
pb <- aggregateData(sce)
pbMDS(pb)
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
# top genes in a given cell type
pbHeatmap(sce, res, k="astrocytes", top_n = 5)
# we extract all differentially-expressed genes:
degs <- unique(res2[res2$p_adj.loc<0.05,"gene"])
# we flatten the pb object (putting all cell types in the same assay) and calculate foldchanges
pb2 <- pbFlatten(pb)
# we add a logFC assay:
pb2 <- sechm::log2FC(pb2, fromAssay="logcpm", controls=pb2$group_id=="WT", by=pb2$cluster_id)
# we reorder
pb2 <- pb2[,order(pb2$cluster_id, pb2$group_id)]
# we plot a heatmap of the logFC of the top 200 genes across all cell types
sechm(pb2, head(degs,200), assayName="log2FC", gaps_at="cluster_id",
column_title_gp=gpar(fontsize=9))
degs
View(degs)
View(res)
res$table
res$table
res2
UpSet(res2)
?UpSet()
as.data.frame(decideTests(res2)
as.data.frame(decideTests(res2))
res2
?decideTests()
?decideTests()
View(res2)
res2[6]
as.data.frame(decideTests(res2[6]))
DEgenes<- as.data.frame(decideTests(res2[6]))
upset(as.data.frame(DEgenesdif), sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran) # sc analysis
library(scater) # sc QC and plotting
library(batchelor) # batch correction methods
library(scDblFinder) # doublet detection
# library(sctransform) # variance-stabilizing transformation (optional)
library(muscat) # differential expression analysis
library(BiocParallel) # handling multi-threading
library(BiocNeighbors) # specifying params for kNN
library(igraph) # for manual graph clustering
library(sechm) # plotting
library(ggplot2) # plotting
library(patchwork) # to combine
library(grid)
library(UpSetR)
})
DEgenes<- as.data.frame(decideTests(res2[6]))
upset(as.data.frame(DEgenesdif), sets = colnames(as.data.frame(DEgenesdif)), order.by = "freq")
res2[2])
res2[2]
DEgenes<- as.data.frame(decideTests(res2[2]))
DEgenes<- as.data.frame(decideTests(res2[2]))
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
DEgenes<- as.data.frame(decideTests(res2[2]))
res2[2])
res2[2]
DEgenes<- as.data.frame(decideTests(res2[6]))
upset(DEgenes, sets = colnames(res2[2]), order.by = "freq")
DEgenes
res2[DEgenes]
res2[[DEgenes]]
res2[DEgenes,]
res2[,DEgenes]
DEgens
DEgenes
res2[,DEgenes]
res2
DEgenes
DEgenes[1]
DEgenes[2]
res2[,DEgenes[1]]
res2[DEgenes[1],]
res2
as.data.frame(res2)
res2 <- as.data.frame(res2)
res2[DEgenes[1],]
res2$DEgenes <- DEgenes
res2[res2$DEgenes]
dim(res2)
dim(DEgenes)
res2[res2$DEgenes, ]
res2[res2$DEgenes, ]
class(res2$DEgenes)
DEgenes<- decideTests(res2[6])
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
res2$DEgenes <- DEgenes
res2[res2$DEgenes]
DEgenes<- decideTests(res2[6])
res2$DEgenes <- DEgenes
upset(res2[res2$DEgenes], sets = colnames(res2[2]), order.by = "freq")
res2$DEgenes
DEgenes<- as.list(decideTests(res2[6]))
DEgenes
res2$DEgenes <- DEgenes
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
DEgenes<- as.list(decideTests(res2[6]))
res2$DEgenes <- DEgenes
upset(res2[res2$DEgenes], sets = colnames(res2[2]), order.by = "freq")
res2$DEgenes
View(res2)
res2[res2$DEgenes]
res2[res2$DEgenes,]
DEgenes<- decideTests(res2[6])
DEgenes
DEgenes[1]
DEgenes[1,]
DEgenes[,1]
DEgenes<- decideTests(res2[6])
res2$DEgenes <- DEgenes[,1]
upset(res2[res2$DEgenes], sets = colnames(res2[2]), order.by = "freq")
res2$DEgenes
as.matrix(DEgenes[,1])
DEgenes<- as.data.frame(decideTests(res2[6]))
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
upset(res2[res2$DEgenes], sets = colnames(res2[2]), order.by = "freq")
res2[res2$DEgenes]
res2$DEgenes
res2[res2$DEgenes,]
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
upset(res2[res2$DEgenes,], sets = colnames(res2[2]), order.by = "freq")
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
upset(res2[res2$DEgenes,], sets = colnames(res2[2]), order.by = "freq")
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
upset(res2[res2$DEgenes], sets = colnames(res2[2]), order.by = "freq")
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
upset(res2[res2$DEgenes], order.by = "freq")
res2[res2$DEgenes]
res2[res2$DEgenes],
res2[,res2$DEgenes]
res2[res2$DEgenes,]
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
PvalDEgenes <- res2[res2$DEgenes,]$p_adj.glb
upset(PvalDEgenes, sets = colnames(res2[2]), order.by = "freq")
PvalDEgenes
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
PvalDEgenes <- res2[res2$DEgenes,]$p_adj.glb
upset(PvalDEgenes, order.by = "freq")
dim(PvalDEgenes)
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
PvalDEgenes <- as.dataframe(res2[res2$DEgenes,]$p_adj.glb)
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
PvalDEgenes <- as.data.frame(res2[res2$DEgenes,]$p_adj.glb)
upset(PvalDEgenes, order.by = "freq")
dim(PvalDEgenes)
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
PvalDEgenes <- as.data.frame(res2[res2$DEgenes,]$p_adj.glb)
upset(PvalDEgenes, order.by = "freq")
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
PvalDEgenes <- as.data.frame(res2[res2$DEgenes,]$p_adj.glb)
upset(PvalDEgenes[1], order.by = "freq")
PvalDEgenes[1]
?upset()
res2[res2$DEgenes,]
DEgenes<- as.data.frame(decideTests(res2[6]))
res2$DEgenes <- DEgenes$p_val
upset(res2[res2$DEgenes,], sets = colnames(res2[2]), order.by = "freq")
library(limma) # replace this with packages you will use
library(UpSetR)
library("affy")
library("preprocessCore")
library(ggplot2)
library("edgeR")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_7")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
library(limma) # replace this with packages you will use
library(UpSetR)
library("affy")
library("preprocessCore")
library(ggplot2)
library("edgeR")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
knitr::opts_chunk$set(echo = TRUE)
