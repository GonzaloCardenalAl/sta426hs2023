normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
normalised_g0 <- (y[,grp == 0])
normalised_g1 <- (y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
normalised_g0 <- (y[,grp == 0])
normalised_g1 <- (y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1 <- (y[,grp == 1])
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
normalised_g0 <- (y[,grp == 0])
normalised_g1 <- (y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1 <- (y[,grp == 1])
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1500,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
knitr::opts_chunk$set(echo = TRUE)
# visualize the first 1000 samples in a heatmap
y_heatmap = y
colnames(y_heatmap) = c("V1","V2","V3","V4","V5","V6")
y_heatmap[y_heatmap > 3] = 3
y_heatmap[y_heatmap< (-3)] = -3
pheatmap(y_heatmap[1:1000,],main = "Gene expression of the first 1000 genes('differential expression' added)")
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 50, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
pheatmap(averaged_expression_df[1:10000,], show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
pheatmap(averaged_expression_df[1:10000,], show_rownames = T, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df, show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression (added to first 1000 genes")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(limma) # replace this with packages you will use
library(ggplot2)
library(pheatmap)
library(ROCR)
# Chunk 3
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1. #degrees of freedom
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
# Chunk 4
truevar=sd**2
#We compute residual variance
rvar <- numeric(nrow(y))
for (i in 1:nrow(y)){
g0 <- y[i, grp == 0]
g1 <- y[i, grp == 1]
var0 <- var(g0)
var1 <- var(g1)
n0 <- sum(grp == 0)
n1 <- sum(grp == 1)
pooledvar <- ((n0 -1)*var0 + (n1 -1)* var1)/ (n0 + n1 -2)
rvar[i] <- pooledvar
}
variance_df <- data.frame(TrueVar = truevar, ObservedVar = rvar)
ggplot(variance_df, aes(x = log(TrueVar), y = log(ObservedVar))) +
geom_point() +
labs(x = "Log(True Variance)", y = "Log(Observed Variance)") +
ggtitle("True vs Observed Variance") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 5
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df, show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression (added to first 1000 genes")
# Chunk 6
(design <- model.matrix(~grp))
# Chunk 7
fit <- lmFit(y,design)
fit <- eBayes(fit)
names(fit)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
df <- data.frame(feature=1:length(cols),
t=fit$t[,2],
status=cols)
ggplot(df, aes(x=feature, y=t, colour=status)) +
geom_point() + ylim(-10,10)
# Chunk 8
t <-numeric(nrow(y))
for (i in 1:nrow(y)){
ttest <-  t.test(x= y[i, grp == 0], y= y[i, grp == 1], var.equal = TRUE)
t[i] <- ttest$statistic
}
meandiff <- rowMeans(y[,grp == 1]) - rowMeans(y[, grp == 0])
df_classicfit <- data.frame(feature=1:length(cols),
t=t,
FC = meandiff,
status=cols)
ggplot(df_classicfit, aes(x=feature, y=t, colour=status)) +
geom_point() +
ylim(-10,10)
ggplot(df_classicfit, aes(x=feature, y=FC, colour=status)) +
geom_point() +
ylim(-4, +4) +
geom_hline(yintercept=2) +
geom_hline(yintercept = -2)
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#AUC of each method
AUC_classic <- perf_classic$AUC
perf_classic
perf_classic$AUC
View(perf_FC)
perf_classic$y.values[[1]]
auc(perf_classic)
perf_classic@y.values[[1]]
AUC_classic <-  performance(pred_classic, "auc")
AUC_classic
print("The AUC values where:" AUC_classic@y.values[[1]], AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]] "for classic t-test, moderated t-test and Log-Folg-Change respectively")
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#AUC of each method
AUC_classic <-  performance(pred_classic, "auc")
AUC_moderated <-performance(pred_moderated, "auc")
AUC_FC <- performance(pred_FC, "auc")
print("The AUC values where:" AUC_classic@y.values[[1]], AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]] "for classic t-test, moderated t-test and Log-Folg-Change respectively")
AUC_classic@y.values[[1]]
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#AUC of each method
AUC_classic <-  performance(pred_classic, "auc")
AUC_moderated <-performance(pred_moderated, "auc")
AUC_FC <- performance(pred_FC, "auc")
print("The AUC values where:", AUC_classic@y.values[[1]], AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]], "for classic t-test, moderated t-test and Log-Folg-Change respectively")
AUC_classic <- AUC_classic@y.values[[1]]
print("The AUC values where:", AUC_classic@y.values[[1]])
print("The AUC values where:", AUC_classic)
print(paste("The AUC values where:", AUC_classic)
print(paste("The AUC values where:", AUC_classic))
AUC_classic <-  performance(pred_classic, "auc")
print(paste("The AUC values where:", AUC_classic@y.values[[1]], AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]], "for classic t-test, moderated t-test and Log-Folg-Change respectively")
print(paste("The AUC values where:", AUC_classic@y.values[[1]], AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]], "for classic t-test, moderated t-test and Log-Folg-Change respectively"))
print(paste("The AUC values where:", round(AUC_classic@y.values[[1]]), AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]], "for Classic t-test, Moderated t-test and Log-Folg-Change respectively"))
print(paste("The AUC values where:", round(AUC_classic@y.values[[1]],3), AUC_moderated@y.values[[1]], AUC_FC@y.values[[1]], "for Classic t-test, Moderated t-test and Log-Folg-Change respectively"))
print(paste("The AUC values where:", round(AUC_classic@y.values[[1]],3), round(AUC_moderated@y.values[[1]],3), round(AUC_FC@y.values[[1]],3), "for Classic t-test, Moderated t-test and Log-Folg-Change respectively"))
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#AUC of each method
AUC_classic <-  performance(pred_classic, "auc")
AUC_classic <- AUC_classic@y.values[[1]]
AUC_moderated <-performance(pred_moderated, "auc")
AUC_FC <- performance(pred_FC, "auc")
print(paste("The AUC values where:", round(AUC_classic@y.values[[1]],3), round(AUC_moderated@y.values[[1]],3), round(AUC_FC@y.values[[1]],3), "for Classic t-test, Moderated t-test and Log-Folg-Change respectively"))
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#AUC of each method
AUC_classic <-  performance(pred_classic, "auc")
AUC_moderated <-performance(pred_moderated, "auc")
AUC_FC <- performance(pred_FC, "auc")
print(paste("The AUC values where:", round(AUC_classic@y.values[[1]],3), round(AUC_moderated@y.values[[1]],3), round(AUC_FC@y.values[[1]],3), "for Classic t-test, Moderated t-test and Log-Folg-Change respectively"))
#plot the ROCs
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test vs. Log-Fold-Change")
plot(perf_moderated, col = "red", add = TRUE)
plot(perf_FC, col="green", add= TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test", "Log-Fold-Change"), col = c("blue", "red", "green"), lty = 1)
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(limma) # replace this with packages you will use
library(ggplot2)
library(pheatmap)
library(ROCR)
# Chunk 3
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1. #degrees of freedom
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
# Chunk 4
truevar=sd**2
#We compute residual variance
rvar <- numeric(nrow(y))
for (i in 1:nrow(y)){
g0 <- y[i, grp == 0]
g1 <- y[i, grp == 1]
var0 <- var(g0)
var1 <- var(g1)
n0 <- sum(grp == 0)
n1 <- sum(grp == 1)
pooledvar <- ((n0 -1)*var0 + (n1 -1)* var1)/ (n0 + n1 -2)
rvar[i] <- pooledvar
}
variance_df <- data.frame(TrueVar = truevar, ObservedVar = rvar)
ggplot(variance_df, aes(x = log(TrueVar), y = log(ObservedVar))) +
geom_point() +
labs(x = "Log(True Variance)", y = "Log(Observed Variance)") +
ggtitle("True vs Observed Variance") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 5
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df, show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression (added to first 1000 genes")
# Chunk 6
(design <- model.matrix(~grp))
# Chunk 7
fit <- lmFit(y,design)
fit <- eBayes(fit)
names(fit)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
df <- data.frame(feature=1:length(cols),
t=fit$t[,2],
status=cols)
ggplot(df, aes(x=feature, y=t, colour=status)) +
geom_point() + ylim(-10,10)
# Chunk 8
t <-numeric(nrow(y))
for (i in 1:nrow(y)){
ttest <-  t.test(x= y[i, grp == 0], y= y[i, grp == 1], var.equal = TRUE)
t[i] <- ttest$statistic
}
meandiff <- rowMeans(y[,grp == 1]) - rowMeans(y[, grp == 0])
df_classicfit <- data.frame(feature=1:length(cols),
t=t,
FC = meandiff,
status=cols)
ggplot(df_classicfit, aes(x=feature, y=t, colour=status)) +
geom_point() +
ylim(-10,10)
ggplot(df_classicfit, aes(x=feature, y=FC, colour=status)) +
geom_point() +
ylim(-4, +4) +
geom_hline(yintercept=2) +
geom_hline(yintercept = -2)
# Chunk 9
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#AUC of each method
AUC_classic <-  performance(pred_classic, "auc")
AUC_moderated <-performance(pred_moderated, "auc")
AUC_FC <- performance(pred_FC, "auc")
print(paste("The AUC values where:", round(AUC_classic@y.values[[1]],3), round(AUC_moderated@y.values[[1]],3), round(AUC_FC@y.values[[1]],3), "for Classic t-test, Moderated t-test and Log-Folg-Change respectively"))
#plot the ROCs
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test vs. Log-Fold-Change")
plot(perf_moderated, col = "red", add = TRUE)
plot(perf_FC, col="green", add= TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test", "Log-Fold-Change"), col = c("blue", "red", "green"), lty = 1)
# Chunk 10
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Statistical Bioinformatics/exercise 4")
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
#Fit the model
fit <- lmFit(eset, design)
#Create contrast matrix
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
#Fit contrast matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
#Summarize the differential expression statistics
topTable(fit2, coef=1, n=5)
topTable(fit2, coef=2, n=5)
#Plot for one gene expression
df <- cbind(df, expr = exprs(eset)["39642_at",])
df$condition <- paste0(df$treatment, df$time.h)
ggplot(df, aes(x = condition, y = expr, shape=treatment, colour=time.h)) +
geom_point(size = 4)
contrast_df = as.data.frame(topTable(fit2, coef=1, n = 100000))
contrast_df = contrast_df[order(contrast_df$P.Value),]
head(contrast_df)
GE_df = as.data.frame(eset)
top_DE_gen = GE_df$X39642_at
average_g0 = mean(top_DE_gen[1:2])
average_g1 = mean(top_DE_gen[3:4])
logFC = average_g1 - average_g0
logFC
mean(top_DE_gen)
contrast_df = as.data.frame(topTable(fit2, coef=1, n = 100000))
contrast_df = contrast_df[order(contrast_df$P.Value),]
head(contrast_df)
