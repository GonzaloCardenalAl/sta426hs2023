fit_ex7 <- glmFit(y_ex7,design)
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype )
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7,coef=3)
stats_covariate_out <- as.data.frame(topTags(lrt, n=Inf))
stats_ex7 <- as.data.frame(topTags(lrt_ex7, n=Inf))
DE_covariate <- data.frame(Pvalue = stats_covariate_out$PValue)
rownames(DE_covariate) <- rownames(stats_covariate_out)
DE_covariate$DE_covariate <- decideTests(as.matrix(DE_covariate), adjust.method = "fdr")
DE_ex7 <- data.frame(Pvalue = stats_ex7$PValue)
rownames(DE_ex7) <- rownames(stats_ex7)
DE_ex7$DE_ex7 <- decideTests(as.matrix(DE_ex7), adjust.method = "fdr")
venn_c <- data.frame(DE_covariate = DE_covariate$DE_covariate, DE_ex7 = DE_ex7$DE_ex7)
colnames(venn_c) <- c("DE covariate addressed", "DE ex7")
x<-vennCounts(venn_c)
vennDiagram(x)
#
n_DE_equal <- sum(DE_covariate == DE_ex7)
setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data")
(samples <- read.table("samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
counts <- readDGE(samples$countfile)$counts
(grp <- gsub("\\-.[0-9]*","",colnames(counts)))
mds <- plotMDS(counts, plot=FALSE)
MDSdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y, libtype= samples$libtype, Treatment = grp, shortname = samples$shortname)
MDSdf<-MDSdf[order(MDSdf$shortname),]
ggplot(MDSdf, aes(x = MDS1, y = MDS2, color = libtype, shape = shortname )) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling", x='Leading logFC dim 1 (99%)', y='Leading logFC dim 2 (1%)')+
theme(plot.title = element_text(hjust = 0.5))+
scale_shape_manual(values = c(1,2,3,4,1,2,3))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype )
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7,coef=3)
stats_covariate_out <- as.data.frame(topTags(lrt, n=Inf))
stats_ex7 <- as.data.frame(topTags(lrt_ex7, n=Inf))
DE_covariate <- data.frame(Pvalue = stats_covariate_out$PValue)
rownames(DE_covariate) <- rownames(stats_covariate_out)
DE_covariate$DE_covariate <- decideTests(as.matrix(DE_covariate), adjust.method = "fdr")
DE_ex7 <- data.frame(Pvalue = stats_ex7$PValue)
rownames(DE_ex7) <- rownames(stats_ex7)
DE_ex7$DE_ex7 <- decideTests(as.matrix(DE_ex7), adjust.method = "fdr")
venn_c <- data.frame(DE_covariate = DE_covariate$DE_covariate, DE_ex7 = DE_ex7$DE_ex7)
colnames(venn_c) <- c("DE covariate addressed", "DE ex7")
x<-vennCounts(venn_c)
vennDiagram(x)
#
n_DE_equal <- sum(DE_covariate == DE_ex7)
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype )
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=3)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7,coef=2)
stats_covariate_out <- as.data.frame(topTags(lrt, n=Inf))
stats_ex7 <- as.data.frame(topTags(lrt_ex7, n=Inf))
DE_covariate <- data.frame(Pvalue = stats_covariate_out$PValue)
rownames(DE_covariate) <- rownames(stats_covariate_out)
DE_covariate$DE_covariate <- decideTests(as.matrix(DE_covariate), adjust.method = "fdr")
DE_ex7 <- data.frame(Pvalue = stats_ex7$PValue)
rownames(DE_ex7) <- rownames(stats_ex7)
DE_ex7$DE_ex7 <- decideTests(as.matrix(DE_ex7), adjust.method = "fdr")
venn_c <- data.frame(DE_covariate = DE_covariate$DE_covariate, DE_ex7 = DE_ex7$DE_ex7)
colnames(venn_c) <- c("DE covariate addressed", "DE ex7")
x<-vennCounts(venn_c)
vennDiagram(x)
#
n_DE_equal <- sum(DE_covariate == DE_ex7)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7,coef=1)
stats_covariate_out <- as.data.frame(topTags(lrt, n=Inf))
stats_ex7 <- as.data.frame(topTags(lrt_ex7, n=Inf))
DE_covariate <- data.frame(Pvalue = stats_covariate_out$PValue)
rownames(DE_covariate) <- rownames(stats_covariate_out)
DE_covariate$DE_covariate <- decideTests(as.matrix(DE_covariate), adjust.method = "fdr")
DE_ex7 <- data.frame(Pvalue = stats_ex7$PValue)
rownames(DE_ex7) <- rownames(stats_ex7)
DE_ex7$DE_ex7 <- decideTests(as.matrix(DE_ex7), adjust.method = "fdr")
venn_c <- data.frame(DE_covariate = DE_covariate$DE_covariate, DE_ex7 = DE_ex7$DE_ex7)
colnames(venn_c) <- c("DE covariate addressed", "DE ex7")
x<-vennCounts(venn_c)
vennDiagram(x)
#
n_DE_equal <- sum(DE_covariate == DE_ex7)
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype )
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=3)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7,coef=2)
stats_covariate_out <- as.data.frame(topTags(lrt, n=Inf))
stats_ex7 <- as.data.frame(topTags(lrt_ex7, n=Inf))
DE_covariate <- data.frame(Pvalue = stats_covariate_out$PValue)
rownames(DE_covariate) <- rownames(stats_covariate_out)
DE_covariate$DE_covariate <- decideTests(as.matrix(DE_covariate), adjust.method = "fdr")
DE_ex7 <- data.frame(Pvalue = stats_ex7$PValue)
rownames(DE_ex7) <- rownames(stats_ex7)
DE_ex7$DE_ex7 <- decideTests(as.matrix(DE_ex7), adjust.method = "fdr")
venn_c <- data.frame(DE_covariate = DE_covariate$DE_covariate, DE_ex7 = DE_ex7$DE_ex7)
colnames(venn_c) <- c("DE covariate addressed", "DE ex7")
x<-vennCounts(venn_c)
vennDiagram(x)
#
n_DE_equal <- sum(DE_covariate == DE_ex7)
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype )
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7,coef=2)
stats_covariate_out <- as.data.frame(topTags(lrt, n=Inf))
stats_ex7 <- as.data.frame(topTags(lrt_ex7, n=Inf))
DE_covariate <- data.frame(Pvalue = stats_covariate_out$PValue)
rownames(DE_covariate) <- rownames(stats_covariate_out)
DE_covariate$DE_covariate <- decideTests(as.matrix(DE_covariate), adjust.method = "fdr")
DE_ex7 <- data.frame(Pvalue = stats_ex7$PValue)
rownames(DE_ex7) <- rownames(stats_ex7)
DE_ex7$DE_ex7 <- decideTests(as.matrix(DE_ex7), adjust.method = "fdr")
venn_c <- data.frame(DE_covariate = DE_covariate$DE_covariate, DE_ex7 = DE_ex7$DE_ex7)
colnames(venn_c) <- c("DE covariate addressed", "DE ex7")
x<-vennCounts(venn_c)
vennDiagram(x)
#
n_DE_equal <- sum(DE_covariate == DE_ex7)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
sine_fit <- lm(y ~ sin(x))
normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
lines(lowess(normalized_data~x, f=1/10), col="orange", lwd=3)
lines(lowess(y~x, f=1), col="blue", lwd=3)
shapiro.test(normalized_data)
?shapiro.test()
lowess_estimate_1 = lowess(y~x, f=2/3)$y
lowess_estimate_2 = lowess(y~x, f=1/3)$y
lowess_estimate_3 = lowess(y~x, f=1/10)$y
difference_1 = sin(x) - lowess_est_1
lowess_estimate_1 = lowess(y~x, f=2/3)$y
lowess_estimate_2 = lowess(y~x, f=1/3)$y
lowess_estimate_3 = lowess(y~x, f=1/10)$y
difference_1 = sin(x) - lowess_estimate_1
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 2/3)')
difference_2 = sin(x) - lowess_estimate_2
hist(difference_2, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/3)')
difference_3 = sin(x) - lowess_estimate_3
hist(difference_3, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
sine_fit <- lm(y ~ sin(x))
normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
plot(x, sin(x))
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
difference_3 = sin(x) - lowess_estimate_3
hist(difference_3, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
plot(x, sin(x), col="red", lwd=3)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
plot(x, sin(x), col="red", lwd=2)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
plot(x, sin(x), col="green")
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
plot(x, sin(x), col="green"), main = "Sin(x) against lowess estimates")
plot(x, sin(x), col="green",main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
qqnorm(normalized_data, main = "Q-Q Plot against Gaussian", col = "blue", pch = 20)
qqline(normalized_data, col = "red")
(samples <- read.table("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
counts <- readDGE(samples$countfile)$counts
(grp <- gsub("\\-.[0-9]*","",colnames(counts)))
mds <- plotMDS(counts, plot=FALSE)
MDSdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y, libtype= samples$libtype, Treatment = grp, shortname = samples$shortname)
MDSdf<-MDSdf[order(MDSdf$shortname),]
ggplot(MDSdf, aes(x = MDS1, y = MDS2, color = libtype, shape = shortname )) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling", x='Leading logFC dim 1 (99%)', y='Leading logFC dim 2 (1%)')+
theme(plot.title = element_text(hjust = 0.5))+
scale_shape_manual(values = c(1,2,3,4,1,2,3))
setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data")
#setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data")
(samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
#setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data")
(samples <- read.table("/data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8")
#setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data")
(samples <- read.table("/data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
#setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data")
(samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
getwd()
dir<-getwd()
(samples <- read.table(dir"/data/samples.txt", header=TRUE,
dir<-getwd()
(samples <- read.table(dir+"/data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE))
dir<-getwd()
(samples <- read.table(paste0(dir"/data/samples.txt"), header=TRUE,
dir<-getwd()
(samples <- read.table(paste0(dir,"/data/samples.txt"), header=TRUE,
row.names=5, stringsAsFactors=FALSE))
samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE)
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8")
knitr::opts_chunk$set(echo = TRUE)
library(limma) # replace this with packages you will use
library(ggplot2)
library("edgeR")
library(UpSetR)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/5), col="green", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/10", "sin(x)"), col=c("blue", "black", "orange", "green"), lty=1, lwd=3)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/10", "sin(x)"), col=c("blue", "black", "orange", "green"), lty=1, lwd=3)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/5), col="red", lwd=3, legend.text="f=1/5")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/10", "sin(x)"), col=c("blue", "black", "orange", "green"), lty=1, lwd=3)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/5), col="red", lwd=3, legend.text="f=1/5")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/10", "sin(x)"), col=c("blue", "black", "red" "orange", "green"), lty=1, lwd=3)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/5), col="red", lwd=3, legend.text="f=1/5")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/10", "sin(x)"), col=c("blue", "black", "red", "orange", "green"), lty=1, lwd=3)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/5), col="red", lwd=3, legend.text="f=1/5")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/5","f=1/10", "sin(x)"), col=c("blue", "black", "red", "orange", "green"), lty=1, lwd=3)
normalized_data <- y - lowess(y~x, f=1/5)$y
#sine_fit <- lm(y ~ sin(x))
#normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
hist(normalized_data, main = "Histogram of Normalized Data", col = "green", xlab = "Normalized Values", ylab = "Frequency", breaks = 30)
lowess_estimate_1 <- lowess(y~x, f=1/5)$y
difference_1 = sin(x) - lowess_estimate_1
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 2/3)')
lowess_estimate <- lowess(y~x, f=1/5)$y
true_sin <- sin(x)[order(x)]
estimated <- lowess_estimate$y[order(lowess_estimate$x)]
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
estimated <- lowess_estimate$y[order(lowess_estimate$x)]
true_sin <- sin(x)[order(x)]
estimated <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = sin(x) - lowess_estimate
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
estimated <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = sin(x) - lowess_estimate
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = true_sin - lowess_estimate
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 2/3)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 2/3)')
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
lines(lowess(y~x, f=2/3), col="blue", lwd=3, legend.text="f=2/3")
lines(lowess(y~x, f=1/3), col="black", lwd=3, legend.text="f=1/3")
lines(lowess(y~x, f=1/5), col="red", lwd=3, legend.text="f=1/5")
lines(lowess(y~x, f=1/10), col="orange", lwd=3, legend.text="f=1/10")
legend("topright", legend=c("f=2/3", "f=1/3", "f=1/5","f=1/10", "sin(x)"), col=c("blue", "black", "red", "orange", "green"), lty=1, lwd=3)
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/10)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/10)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/10)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/10)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/10)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
lowess_estimate <- lowess(y~x, f=1/5)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/5)')
lowess_estimate <- lowess(y~x, f=1/10)
true_sin <- sin(x)[order(x)]
lowess_estimate <- lowess_estimate$y[order(lowess_estimate$x)]
difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
library(pasilla)
(sdir <- file.path(system.file(package="pasilla"), "extdata"))
dir(sdir)
anno <- file.path(sdir, "Dmel.BDGP5.25.62.DEXSeq.chr.gff")
samplesX = data.frame(cond = rep( c("trt","untrt"), c(3,4) ),
type = c("SE","PE","PE","SE","SE","PE","PE"),
countfile = dir(sdir,pattern="fb.txt"),
stringsAsFactors = TRUE)
samplesX
library(DEXSeq)
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, filename ),
sampleData = samples,
design = ~ sample + exon + type:exon + condition:exon)
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8")
library(DEXSeq)
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, filename ),
sampleData = samples,
design = ~ sample + exon + type:exon + condition:exon)
library(DEXSeq)
#Setting
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, samplesX$countfile ),
sampleData = samplesX,
design = ~ sample + exon + type:exon + cond:exon,
flattenedfile = anno)
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd)
dxr <- DEXSeqResults(dxd)
dxr <- dxr[order(dxr$padj), ]
top_DSgene<- dxr$groupID[1]
#Plot the differentially spliced gene
plotDEXSeq(dxr, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr
dxr <- dxr[order(dxr$padj), ]
top_DSgene<- dxr$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr_sorted <- dxr[order(dxr$padj), ]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr_sorted, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
library(DEXSeq)
#Setting
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, samplesX$countfile ),
sampleData = samplesX,
design = ~ sample + exon + type:exon + cond:exon,
flattenedfile = anno)
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd)
dxr <- DEXSeqResults(dxd)
dxr_sorted <- dxr[order(dxr$padj), ]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr_sorted, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr_sorted <- dxr[order(dxr$padj), ]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr_sorted, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr_sorted <- dxr[order(dxr$padj),]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
shapiro.test(normalized_data)
normalized_data <- y - lowess(y~x, f=1/5)$y
#sine_fit <- lm(y ~ sin(x))
#normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
library(limma) # replace this with packages you will use
library(ggplot2)
library("edgeR")
library(UpSetR)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
normalized_data <- y - lowess(y~x, f=1/10)$y
#sine_fit <- lm(y ~ sin(x))
#normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
