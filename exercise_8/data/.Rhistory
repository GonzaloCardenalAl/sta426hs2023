difference_1 = abs(true_sin - lowess_estimate)
hist(difference_1, breaks=50, main="Histogram:Difference between the truth (sine curve) and the lowess estimate", xlab = 'Difference lowess estimate(f = 1/10)')
library(pasilla)
(sdir <- file.path(system.file(package="pasilla"), "extdata"))
dir(sdir)
anno <- file.path(sdir, "Dmel.BDGP5.25.62.DEXSeq.chr.gff")
samplesX = data.frame(cond = rep( c("trt","untrt"), c(3,4) ),
type = c("SE","PE","PE","SE","SE","PE","PE"),
countfile = dir(sdir,pattern="fb.txt"),
stringsAsFactors = TRUE)
samplesX
library(DEXSeq)
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, filename ),
sampleData = samples,
design = ~ sample + exon + type:exon + condition:exon)
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8")
library(DEXSeq)
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, filename ),
sampleData = samples,
design = ~ sample + exon + type:exon + condition:exon)
library(DEXSeq)
#Setting
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, samplesX$countfile ),
sampleData = samplesX,
design = ~ sample + exon + type:exon + cond:exon,
flattenedfile = anno)
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd)
dxr <- DEXSeqResults(dxd)
dxr <- dxr[order(dxr$padj), ]
top_DSgene<- dxr$groupID[1]
#Plot the differentially spliced gene
plotDEXSeq(dxr, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr
dxr <- dxr[order(dxr$padj), ]
top_DSgene<- dxr$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr_sorted <- dxr[order(dxr$padj), ]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr_sorted, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
library(DEXSeq)
#Setting
dxd <- DEXSeqDataSetFromHTSeq(
countfiles=file.path( sdir, samplesX$countfile ),
sampleData = samplesX,
design = ~ sample + exon + type:exon + cond:exon,
flattenedfile = anno)
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd)
dxr <- DEXSeqResults(dxd)
dxr_sorted <- dxr[order(dxr$padj), ]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr_sorted, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr_sorted <- dxr[order(dxr$padj), ]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr_sorted, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
dxr_sorted <- dxr[order(dxr$padj),]
top_DSgene<- dxr_sorted$groupID[2]
#Plot the differentially spliced gene
plotDEXSeq(dxr, geneID = top_DSgene, legend=TRUE, fitExpToVar = "cond")
shapiro.test(normalized_data)
normalized_data <- y - lowess(y~x, f=1/5)$y
#sine_fit <- lm(y ~ sin(x))
#normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
plot(x, sin(x), col="green", main = "Sin(x) against lowess estimates")
library(limma) # replace this with packages you will use
library(ggplot2)
library("edgeR")
library(UpSetR)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)
plot(x,y)
normalized_data <- y - lowess(y~x, f=1/10)$y
#sine_fit <- lm(y ~ sin(x))
#normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
library(limma) # replace this with packages you will use
library(ggplot2)
library("edgeR")
library(UpSetR)
samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE)
setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data/")
counts <- readDGE(samples$countfile)$counts
(grp <- gsub("\\-.[0-9]*","",colnames(counts)))
mds <- plotMDS(counts, plot=FALSE)
MDSdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y, libtype= samples$libtype, Treatment = grp, shortname = samples$shortname)
MDSdf<-MDSdf[order(MDSdf$shortname),]
ggplot(MDSdf, aes(x = MDS1, y = MDS2, color = libtype, shape = shortname )) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling", x='Leading logFC dim 1 (99%)', y='Leading logFC dim 2 (1%)')+
theme(plot.title = element_text(hjust = 0.5))+
scale_shape_manual(values = c(1,2,3,4,1,2,3))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 3)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 2:3)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 3)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1])
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[,1])
DE_unique_covariate_gene
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- y$counts[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
df_gene
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- y$counts[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of uni")
theme(plot.title = element_text(hjust = 0.5))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- y$counts[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of uni")+
theme(plot.title = element_text(hjust = 0.5))
rownames(DE_unique_covariate_gene)
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- y$counts[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
View(df)
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
colnames(df) <- c("DE_covariate_addressed", "DE_ex7")
df[df == -1] = 1
upset(as.data.frame(df))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- y$counts[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
?(calcNormFactors)
?cpm()
?calcNormFactors()
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- y$counts[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts[rownames(DE_unique_covariate_gene),])
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts[rownames(DE_unique_covariate_gene),], log=TRUE)
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
DE_unique_covariate_gene_expression
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts[rownames(DE_unique_covariate_gene),])
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts[rownames(DE_unique_covariate_gene),])
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = normalised_expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = normalised_expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
colnames(df) <- c("DE_covariate_addressed", "DE_ex7")
df[df == -1] = 1
upset(as.data.frame(df))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
colnames(df) <- c("DE_covariate_addressed", "DE_ex7")
df[df == -1] = 1
upset(as.data.frame(df))
lrt <- glmLRT(fit, coef = 3)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = normalised_expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
colnames(df) <- c("DE_covariate_addressed", "DE_ex7")
df[df == -1] = 1
upset(as.data.frame(df))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
colnames(df) <- c("DE_covariate_addressed", "DE_ex7")
df[df == -1] = 1
upset(as.data.frame(df))
View(mds)
design <- model.matrix(~libtype)
y <- estimateDisp(y,design)
lrt_unique_libtype <- glmLRT(fit)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt_unique_libtype, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = normalised_expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~libtype)
y <- estimateDisp(y,design)
lrt_unique_libtype <- glmLRT(fit)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt_unique_libtype, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = normalised_expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt_unique_libtype <- glmLRT(fit)
DE_unique_covariate_gene <- as.data.frame(topTags(lrt_unique_libtype, n=Inf)[1,])
DE_unique_covariate_gene_expression <- cpm(y$counts)[rownames(DE_unique_covariate_gene),]
df_gene <- data.frame( sample = names(DE_unique_covariate_gene_expression), normalised_expression = DE_unique_covariate_gene_expression,
libtype = libtype)
ggplot(data = df_gene, aes(x = sample, y = normalised_expression, fill = libtype)) +
geom_bar(stat="identity")+
labs(title="Expression of gene FBgn0013680 solely driven by libtype")+
theme(plot.title = element_text(hjust = 0.5))
samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE)
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8")
samples <- read.table("data/samples.txt", header=TRUE,
row.names=5, stringsAsFactors=FALSE)
setwd("/Users/gonuni/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise_8/data/")
counts <- readDGE(samples$countfile)$counts
(grp <- gsub("\\-.[0-9]*","",colnames(counts)))
mds <- plotMDS(counts, plot=FALSE)
MDSdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y, libtype= samples$libtype, Treatment = grp, shortname = samples$shortname)
MDSdf<-MDSdf[order(MDSdf$shortname),]
ggplot(MDSdf, aes(x = MDS1, y = MDS2, color = libtype, shape = shortname )) +
geom_point(size = 4) +
labs(title= "Multidimensional Scaling", x='Leading logFC dim 1 (99%)', y='Leading logFC dim 2 (1%)')+
theme(plot.title = element_text(hjust = 0.5))+
scale_shape_manual(values = c(1,2,3,4,1,2,3))
group <- factor(grp)
libtype <- factor(samples$libtype)
y <- DGEList(counts=counts,group=group,libtype=libtype)
y <- calcNormFactors(y)
design <- model.matrix(~group + libtype)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit, coef = 2)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
y <- DGEList(counts=counts,group=group)
y <- calcNormFactors(y)
design_ex7 <- model.matrix(~group)
y_ex7 <- estimateDisp(y,design_ex7)
fit_ex7 <- glmFit(y_ex7,design)
lrt_ex7 <- glmLRT(fit_ex7, coef = 2)
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
colnames(df) <- c("DE_covariate_addressed", "DE_ex7")
df[df == -1] = 1
upset(as.data.frame(df))
lrt <- glmLRT(fit, coef = 3)
DE_covariate <- as.data.frame(topTags(lrt, n=Inf))
DE_covariate <- decideTests(lrt)
DE_ex7 <- decideTests(lrt_ex7)
df <- cbind(DE_covariate, DE_ex7)
df[df == -1] = 1
upset(as.data.frame(df))
