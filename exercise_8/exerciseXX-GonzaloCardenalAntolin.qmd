---
title: "Exercise XX"
author: "Gonzalo Cardenal Antolin (GonzaloCardenalAl)"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Load packages

```{r }
library(limma) # replace this with packages you will use
library(ggplot2)
```

## Question 1

*Simulate data from the sine curve (from 0 to 2pi) with Gaussian noise added (as shown in the lecture). Try and “normalize” the sine curve data. That is, subtract the trend of the data, such that if the normalization succeeds, you are left with normally distributed data centred around zero. After this: i) make a plot of the normalized data; ii) make a plot of the difference between the truth (sine curve) and the loess/lowess estimate; iii) create a quantile-quantile (against Gaussian) plot of the normalized data. Comment on the results. Did your normalization work? Does it look (sufficiently) Gaussian? You may need to play with parameters to get a “good” lowess/loess estimate in the first place.*

```{r}
x <- runif(1000, 0, 2*pi)
y <- sin(x) + rnorm(1000, sd = .3)

plot(x,y)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="black", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
```

```{r}
sine_fit <- lm(y ~ sin(x))
normalized_data <- resid(sine_fit)
plot(x, normalized_data, main = "Normalized Data")
lines(lowess(normalized_data~x, f=1/10), col="orange", lwd=3)
lines(lowess(y~x, f=1), col="blue", lwd=3)
```

```{r}
y_truth <- sin(x)
plot(x, y_truth)
lines(lowess(y~x, f=2/3), col="blue", lwd=3)
lines(lowess(y~x, f=1/3), col="green", lwd=3)
lines(lowess(y~x, f=1/10), col="orange", lwd=3)
lines(lowess(y~x, f=1/15), col="red", lwd=3)
```

```{r}
qqnorm(normalized_data, main = "Q-Q Plot against Gaussian", col = "blue", pch = 20)
qqline(normalized_data, col = "red")
```

We plot an histogram to check for the distribution of the normalised data:
```{r}
hist(normalized_data, main = "Histogram of Normalized Data", col = "green", xlab = "Normalized Values", ylab = "Frequency", breaks = 30)
```

## Question 2

Next, we will revisit the analysis from Exercise 7 (pasilla dataset), to account for a covariate. In the second part, we will use (preprocessed) exon-level counts to look for changes in splicing.
```{r}
(samples <- read.table("samples.txt", header=TRUE,
                      row.names=5, stringsAsFactors=FALSE))

```

