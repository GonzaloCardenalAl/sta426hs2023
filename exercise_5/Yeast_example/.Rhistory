t <-numeric(nrow(y))
for (i in 1:nrow(y)){
ttest <-  t.test(x= y[i, grp == 0], y= y[i, grp == 1], var.equal = TRUE)
t[i] <- ttest$statistic
}
meandiff <- mean_normalised_g1 - mean_normalised_g0
df_classicfit <- data.frame(feature=1:length(cols),
t=t,
FC = meandiff,
status=cols)
ggplot(df_classicfit, aes(x=feature, y=t, colour=status)) +
geom_point() +
ylim(-10,10)
ggplot(df_classicfit, aes(x=feature, y=FC, colour=status)) +
geom_point()
ggplot(df_classicfit, aes(x=feature, y=FC, colour=status)) +
geom_point() +
ylim(-4, +4) +
geom_hline(yintercept=2) +
geom_hline(yintercept = -2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(limma) # replace this with packages you will use
library(ggplot2)
library(pheatmap)
# Chunk 3
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1. #degrees of freedom
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
# Chunk 4
truevar=sd**2
#We compute residual variance
rvar <- numeric(nrow(y))
for (i in 1:nrow(y)){
g0 <- y[i, grp == 0]
g1 <- y[i, grp == 1]
var0 <- var(g0)
var1 <- var(g1)
n0 <- sum(grp == 0)
n1 <- sum(grp == 1)
pooledvar <- ((n0 -1)*var0 + (n1 -1)* var1)/ (n0 + n1 -2)
rvar[i] <- pooledvar
}
variance_df <- data.frame(TrueVar = truevar, ObservedVar = rvar)
ggplot(variance_df, aes(x = log(TrueVar), y = log(ObservedVar))) +
geom_point() +
labs(x = "Log(True Variance)", y = "Log(Observed Variance)") +
ggtitle("True vs Observed Variance") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 5
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df, show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
# Chunk 6
(design <- model.matrix(~grp))
# Chunk 7
fit <- lmFit(y,design)
fit <- eBayes(fit)
names(fit)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
df <- data.frame(feature=1:length(cols),
t=fit$t[,2],
status=cols)
ggplot(df, aes(x=feature, y=t, colour=status)) +
geom_point() + ylim(-10,10)
# Chunk 8
t <-numeric(nrow(y))
for (i in 1:nrow(y)){
ttest <-  t.test(x= y[i, grp == 0], y= y[i, grp == 1], var.equal = TRUE)
t[i] <- ttest$statistic
}
meandiff <- meanRows(y[i, grp == 1]) - meanRows(y[i, grp == 0])
meandiff <- rowMeans(y[i, grp == 1]) - rowMeans(y[i, grp == 0])
meandiff <- rowMeans(y[,grp == 1]) - rowMeans(y[, grp == 0])
df_classicfit <- data.frame(feature=1:length(cols),
t=t,
FC = meandiff,
status=cols)
ggplot(df_classicfit, aes(x=feature, y=t, colour=status)) +
geom_point() +
ylim(-10,10)
ggplot(df_classicfit, aes(x=feature, y=FC, colour=status)) +
geom_point() +
ylim(-4, +4) +
geom_hline(yintercept=2) +
geom_hline(yintercept = -2)
ggplot(df_classicfit, aes(x=feature, y=t, colour=status)) +
geom_point() +
ylim(-10,10)
ggplot(df_classicfit, aes(x=feature, y=FC, colour=status)) +
geom_point() +
ylim(-4, +4) +
geom_hline(yintercept=2) +
geom_hline(yintercept = -2)
ggplot(df_classicfit, aes(x=feature, y=t, colour=status)) +
geom_point() +
ylim(-10,10)
install.packages("ROCR")
# Load the ROCR package
library(ROCR)
# Create a prediction object for the classic t-test
pred_classic <- prediction(df_classicfit$t, df_classicfit$status)
# Create a prediction object for the moderated t-test
pred_moderated <- prediction(df$t, df$status)
# Create performance objects for the classic t-test and moderated t-test
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
# Create a plot of the ROC curve
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test")
plot(perf_moderated, col = "red", add = TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test"), col = c("blue", "red"), lty = 1)
pred_classic <- prediction(df_classicfit$t, df_classicfit$status)
# Create a prediction object for the moderated t-test
pred_moderated <- prediction(df$t, df$status)
pred_FC <- prediction(df_classicfit$FC, df_classicfit$status)
# Create performance objects for the classic t-test and moderated t-test
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(predictions, "tpr", "fpr")
# Create a prediction object for the moderated t-test
pred_moderated <- prediction(df$t, df$status)
pred_FC <- prediction(df_classicfit$FC, df_classicfit$status)
# Create performance objects for the classic t-test and moderated t-test
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
# Create a plot of the ROC curve
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test")
plot(perf_moderated, col = "red", add = TRUE)
plot(perf_FC, col="green", add= TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test", "Log-Fold-Change"), col = c("blue", "red", "green"), lty = 1)
# create the predictions
pred_classic <- prediction(df_classicfit$t, df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(df$t, df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(df_classicfit$FC, df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#plot the ROCs
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test")
plot(perf_moderated, col = "red", add = TRUE)
plot(perf_FC, col="green", add= TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test", "Log-Fold-Change"), col = c("blue", "red", "green"), lty = 1)
install.packages("iCOBRA")
BiocManager::install("iCOBRA")
install.packages("affy")
BiocManager::install("affy")
tests_dir <- "/Users/gonuni/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Computational Biology/Homework 1 - Sequence Alignment/student_test_suite"
if(tests_dir == "path/to/tests") stop("tests_dir needs to be set to a proper path")
library("RUnit")
testsuite <- defineTestSuite("CardenalAntolin_Gonzalo", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite, verbose=TRUE)
printTextProtocol(out)
setwd(currentdir)
contrast_df = as.data.frame(topTable(fit2, coef=1, n = 100000))
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("Rsubread", update=FALSE)
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3", update=FALSE)
dir.create("~/Yeast_example")
setwd("~/Yeast_example")
download.file("http://fgcz-gstore.uzh.ch/public/Yeast_Reads/20170313.A-G1_R1-sub.fastq.gz", "G1_R1-sub.fastq.gz")
export(object, con, format, compress=FALSE, compression_level=NA, verbose=TRUE)
library("BSgenome")
library("BSgenome.Scerevisiae.UCSC.sacCer3")
library("Rsubread")
export(object, con, format, compress=FALSE, compression_level=NA, verbose=TRUE)
dir.create("~/Yeast_example")
setwd("~/Yeast_example")
dir.create("~/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Statistical Bioinformatics/exercise 5/Yeast_example")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Statistical Bioinformatics/exercise 5/Yeast_example")
download.file("http://fgcz-gstore.uzh.ch/public/Yeast_Reads/20170313.A-G1_R1-sub.fastq.gz", "G1_R1-sub.fastq.gz")
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(df_classicfit$FC, df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#plot the ROCs
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test vs. Log-Fold-Change")
plot(perf_moderated, col = "red", add = TRUE)
plot(perf_FC, col="green", add= TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test", "Log-Fold-Change"), col = c("blue", "red", "green"), lty = 1)
# create the predictions
pred_classic <- prediction(abs(df_classicfit$t), df_classicfit$status, label.ordering = c("non-differential", "differential"))
pred_moderated <- prediction(abs(df$t), df$status, label.ordering = c("non-differential", "differential"))
pred_FC <- prediction(abs(df_classicfit$FC), df_classicfit$status, label.ordering = c("non-differential", "differential"))
#get the metrics
perf_classic <- performance(pred_classic, "tpr", "fpr")
perf_moderated <- performance(pred_moderated, "tpr", "fpr")
perf_FC <- performance(pred_FC, "tpr", "fpr")
#plot the ROCs
plot(perf_classic, col = "blue", main = "ROC Curve for Classic vs. Moderated T-Test vs. Log-Fold-Change")
plot(perf_moderated, col = "red", add = TRUE)
plot(perf_FC, col="green", add= TRUE)
# Add a legend to the plot
legend("bottomright", legend = c("Classic T-Test", "Moderated T-Test", "Log-Fold-Change"), col = c("blue", "red", "green"), lty = 1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(limma) # replace this with packages you will use
library(ggplot2)
library(pheatmap)
library(ROCR)
# Chunk 3
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1. #degrees of freedom
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
# Chunk 4
truevar=sd**2
#We compute residual variance
rvar <- numeric(nrow(y))
for (i in 1:nrow(y)){
g0 <- y[i, grp == 0]
g1 <- y[i, grp == 1]
var0 <- var(g0)
var1 <- var(g1)
n0 <- sum(grp == 0)
n1 <- sum(grp == 1)
pooledvar <- ((n0 -1)*var0 + (n1 -1)* var1)/ (n0 + n1 -2)
rvar[i] <- pooledvar
}
variance_df <- data.frame(TrueVar = truevar, ObservedVar = rvar)
ggplot(variance_df, aes(x = log(TrueVar), y = log(ObservedVar))) +
geom_point() +
labs(x = "Log(True Variance)", y = "Log(Observed Variance)") +
ggtitle("True vs Observed Variance") +
theme(plot.title = element_text(hjust = 0.5))
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[,1:2000], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
normalised_g0 <- (y[,grp == 0])
normalised_g1 <- (y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
normalised_g0 <- (y[,grp == 0])
normalised_g1 <- (y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1 <- (y[,grp == 1])
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- (y[,grp == 0]-rowMeans(y))/sd
mean_normalised_g0 <- rowMeans(normalised_g0)
normalised_g1 <- (y[,grp == 1]-rowMeans(y))/sd
mean_normalised_g1 <- rowMeans(normalised_g1)
normalised_g0 <- (y[,grp == 0])
normalised_g1 <- (y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1 <- (y[,grp == 1])
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = mean_normalised_g0,
DifferentialExpression = mean_normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g1[normalised_g1 > 3] = 3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1500,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
knitr::opts_chunk$set(echo = TRUE)
# visualize the first 1000 samples in a heatmap
y_heatmap = y
colnames(y_heatmap) = c("V1","V2","V3","V4","V5","V6")
y_heatmap[y_heatmap > 3] = 3
y_heatmap[y_heatmap< (-3)] = -3
pheatmap(y_heatmap[1:1000,],main = "Gene expression of the first 1000 genes('differential expression' added)")
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Control = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 50, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:1000,], show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
pheatmap(averaged_expression_df[1:10000,], show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
pheatmap(averaged_expression_df[1:10000,], show_rownames = T, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df[1:2000,], show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression 1000 genes")
normalised_g0 <- rowMeans(y[,grp == 0])
normalised_g1 <- rowMeans(y[,grp == 1])
normalised_g0[normalised_g0 > 3] = 3
normalised_g0[normalised_g0 < -3] = -3
normalised_g1[normalised_g1 > 3] = 3
normalised_g1[normalised_g1 < -3] = -3
averaged_expression_df <- data.frame(Baseline = normalised_g0,
DifferentialExpression = normalised_g1)
pheatmap(averaged_expression_df, show_rownames = FALSE, treeheight_row = 50, treeheight_col = 30, fontsize = 6, main = "Gene Expression Values Baseline vs. Differential Expression (added to first 1000 genes")
?align()
knitr::opts_chunk$set(echo = TRUE)
fraction_aligned <- align.stat["Mapped_reads",] / align.stat["Total_reads",]
library("BSgenome")
library("BSgenome.Scerevisiae.UCSC.sacCer3")
library("Rsubread")
getwd()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Statistical Bioinformatics/exercise_5")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Statistical Bioinformatics/exercise_5/Yeast_example")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/CBB/1st Semester/Statistical Bioinformatics/exercise_5/Yeast_example")
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(genome, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
buildindex("Yeast_index","Yeast_genome.fasta",memory = 2000)
readfile1 = file.path(getwd(),"/Yeast_example/G1_R1-sub.fastq.gz")
nthreads = 4
align.stat <- Rsubread::align(file.path(getwd(),"/Yeast_index"), readfile1 , nthreads=nthreads)
fraction_aligned <- align.stat["Mapped_reads",] / align.stat["Total_reads",]
print(paste("The fraction of reads aligned from all reads is", as.character(round(fraction_aligned,4)))
fraction_aligned <- align.stat["Mapped_reads",] / align.stat["Total_reads",]
print(paste("The fraction of reads aligned from all reads is", as.character(round(fraction_aligned,4))))
align.stat <- Rsubread::align(file.path(getwd(),"/Yeast_index"), readfile1 , nTrim5 = 5 ,
nTrim3 = 5 ,nthreads=nthreads)
fraction_aligned_trim <-  align.stat["Mapped_reads",] / align.stat["Total_reads",]
print(paste("The fraction of reads aligned from all reads with trimmed ends is", as.character(round(fraction_aligned,4))))
fraction_aligned_trim <-  align.stat_trim["Mapped_reads",] / align.stat["Total_reads",]
align.stat_trim <- Rsubread::align(file.path(getwd(),"/Yeast_index"), readfile1, nTrim5 = 5 ,
nTrim3 = 5 ,nthreads=nthreads)
fraction_aligned_trim <-  align.stat_trim["Mapped_reads",] / align.stat["Total_reads",]
print(paste("The fraction of reads aligned from all reads with trimmed ends is", as.character(round(fraction_aligned,4))))
print(paste("The fraction of reads aligned from all reads with trimmed ends is", as.character(round(fraction_aligned_trim,4))))
library("BSgenome.Scerevisiae.UCSC.sacCer3")
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(genome, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(genome, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
library("BSgenome")
library("BSgenome.Scerevisiae.UCSC.sacCer3")
library("Rsubread")
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(genome, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(genome, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
getwd()
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(genome, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
getwd()
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3", update=FALSE)
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3", update=FALSE, force=TRUE)
out1_file <- file.path(getwd(), "Yeast_genome.fasta")
export(BSgenome.Scerevisiae.UCSC.sacCer3, out1_file, compress=FALSE, compression_level=NA, verbose=TRUE)
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
