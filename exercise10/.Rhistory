color = "blue") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Comparison of P-values", x = "-log10 P-value (egdeR)", y = "-log10 P-value (DESeq2)")
DEG <- de_genes_deseq2
avg_expr <- as.data.frame(sapply(sort(unique(anno$age))[1:5], function(age) {
rowMeans(expr[, which(anno$age == age)])
}))
avg_expr$V6 <- unlist(as.vector(expr[, which(anno$age == 26)]))
avg_expr$V7 <- unlist(as.vector(expr[, which(anno$age == 28)]))
colnames(avg_expr) <- sort(unique(anno$age))
max_age_DEG <-
setNames(colnames(avg_expr)[apply(avg_expr[DEG, ], 1, which.max)], DEG)
table(max_age_DEG)
avg_expr_DEG_list <- tapply(names(max_age_DEG), max_age_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:8, nrow = 2, byrow = T))
par(mar=c(3,3,3,3))
for(age in names(scaled_expr_DEG_list))
boxplot(scaled_expr_DEG_list[[age]],
main = paste0(age, " (", nrow(scaled_expr_DEG_list[[age]]), ")"))
corr_DEG <- cor(t(avg_expr[DEG,]), method = "spearman")
hcl_DEG <- hclust(as.dist(1 - corr_DEG), method = "complete")
plot(hcl_DEG, label = FALSE)
cl_DEG <- cutree(hcl_DEG, k = 2)
heatmap.2(corr_DEG, Rowv = as.dendrogram(hcl_DEG), Colv = as.dendrogram(hcl_DEG),
trace = "none", scale = "none", labRow = NA, labCol = NA, col = viridis,
ColSideColors = rainbow(15)[cl_DEG])
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:2, nrow = 1, byrow = T))
for(cl in 1:2)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
cl_DEG <- cutree(hcl_DEG, k = 4)
heatmap.2(corr_DEG, Rowv = as.dendrogram(hcl_DEG), Colv = as.dendrogram(hcl_DEG),
trace = "none", scale = "none", labRow = NA, labCol = NA, col = viridis,
ColSideColors = rainbow(15)[cl_DEG])
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:4, nrow = 2, byrow = T))
for(cl in 1:4)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
# cluster 1:
rownames(scaled_expr_DEG_list[[1]])
print("")
# cluster 2:
rownames(scaled_expr_DEG_list[[2]])
print("")
# cluster 3:
rownames(scaled_expr_DEG_list[[3]])
print("")
# cluster 4:
rownames(scaled_expr_DEG_list[[4]])
print("")
#I have to delete .version
expr_no_idversion <- expr
rownames(expr_no_idversion) <- sub("\\.\\d+$", "", rownames(expr_no_idversion))
write.table(meta_genes[meta_genes$ensembl_gene_id_version %in% names(which(cl_DEG==2)), "ensembl_gene_id"],
file = "genes_C2.txt",
quote = F, row.names = F, col.names = F)
write.table(meta_genes[meta_genes$expressed, "ensembl_gene_id"],
file = "genes_expressed.txt",
quote = F, row.names = F, col.names = F)
#I have to delete .version
expr_no_idversion <- expr
rownames(expr_no_idversion) <- sub("\\.\\d+$", "", rownames(expr_no_idversion))
write.table(meta_genes[meta_genes$ensembl_gene_id_version %in% names(which(cl_DEG==3)), "ensembl_gene_id"],
file = "genes_C3.txt",
quote = F, row.names = F, col.names = F)
write.table(meta_genes[meta_genes$expressed, "ensembl_gene_id"],
file = "genes_expressed.txt",
quote = F, row.names = F, col.names = F)
#I have to delete .version
expr_no_idversion <- expr
rownames(expr_no_idversion) <- sub("\\.\\d+$", "", rownames(expr_no_idversion))
write.table(meta_genes[meta_genes$ensembl_gene_id_version %in% names(which(cl_DEG==1)), "ensembl_gene_id"],
file = "genes_C1.txt",
quote = F, row.names = F, col.names = F)
write.table(meta_genes[meta_genes$expressed, "ensembl_gene_id"],
file = "genes_expressed.txt",
quote = F, row.names = F, col.names = F)
#I have to delete .version
expr_no_idversion <- expr
rownames(expr_no_idversion) <- sub("\\.\\d+$", "", rownames(expr_no_idversion))
write.table(meta_genes[meta_genes$ensembl_gene_id_version %in% names(which(cl_DEG==4)), "ensembl_gene_id"],
file = "genes_C4.txt",
quote = F, row.names = F, col.names = F)
write.table(meta_genes[meta_genes$expressed, "ensembl_gene_id"],
file = "genes_expressed.txt",
quote = F, row.names = F, col.names = F)
DE_A26 <- DE_test(expr = expr[meta_genes$expressed,],
cond = anno$age == "26",
ctrl = "FALSE",
covar = anno %>% dplyr::select(sex)) %>%
tibble::rownames_to_column("gene")
scores <- setNames(sign(log(DE_A26$fc)) * (-log10(DE_A26$pval)),
setNames(meta_genes$ensembl_gene_id,
meta_genes$ensembl_gene_id_version)[DE_A26$gene])
scores_ordered <- sort(scores, decreasing=T)
library(msigdbr)
genesets_celltype <- msigdbr(species = "Mus musculus", category = "C2")
genesets_celltype_list <- tapply(genesets_celltype$ensembl_gene, genesets_celltype$gs_name, list)
library(fgsea)
fgsea_kegg <- fgsea(pathways = genesets_celltype_list,
stats = scores_ordered[-1],
minSize  = 15,
maxSize  = 500)
fgsea_kegg[order(NES,decreasing=T),][1:10,]
DE_A26 <- DE_test(expr = expr[meta_genes$expressed,],
cond = anno$age == "21",
ctrl = "FALSE",
covar = anno %>% dplyr::select(sex)) %>%
tibble::rownames_to_column("gene")
scores <- setNames(sign(log(DE_A26$fc)) * (-log10(DE_A26$pval)),
setNames(meta_genes$ensembl_gene_id,
meta_genes$ensembl_gene_id_version)[DE_A26$gene])
scores_ordered <- sort(scores, decreasing=T)
library(msigdbr)
genesets_celltype <- msigdbr(species = "Mus musculus", category = "C2")
genesets_celltype_list <- tapply(genesets_celltype$ensembl_gene, genesets_celltype$gs_name, list)
library(fgsea)
fgsea_kegg <- fgsea(pathways = genesets_celltype_list,
stats = scores_ordered[-1],
minSize  = 15,
maxSize  = 500)
fgsea_kegg[order(NES,decreasing=T),][1:10,]
cl_DEG <- cutree(hcl_DEG, k = 7)
heatmap.2(corr_DEG, Rowv = as.dendrogram(hcl_DEG), Colv = as.dendrogram(hcl_DEG),
trace = "none", scale = "none", labRow = NA, labCol = NA, col = viridis,
ColSideColors = rainbow(15)[cl_DEG])
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:2, nrow = 1, byrow = T))
for(cl in 1:2)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:2, nrow = 1, byrow = T))
for(cl in 1:2)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 1, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 3, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 2, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 7, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 6, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 4, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
avg_expr_DEG_list <- tapply(names(cl_DEG), cl_DEG, function(x) avg_expr[x,])
scaled_expr_DEG_list <- lapply(avg_expr_DEG_list, function(x) t(scale(t(x))))
layout(matrix(1:7, nrow = 1, byrow = T))
for(cl in 1:7)
boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
#I have to delete .version
expr_no_idversion <- expr
rownames(expr_no_idversion) <- sub("\\.\\d+$", "", rownames(expr_no_idversion))
write.table(meta_genes[meta_genes$ensembl_gene_id_version %in% names(which(cl_DEG==4)), "ensembl_gene_id"],
file = "genes_C4.txt",
quote = F, row.names = F, col.names = F)
write.table(meta_genes[meta_genes$expressed, "ensembl_gene_id"],
file = "genes_expressed.txt",
quote = F, row.names = F, col.names = F)
scaled_expr_DEG_list[[4]]
boxplot_cl4 <- boxplot(scaled_expr_DEG_list[[cl]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
boxplot_cl4 <- boxplot(scaled_expr_DEG_list[[4]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
boxplot_cl4 <- boxplot(scaled_expr_DEG_list[[4]],
main = paste0(cl, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
boxplot_cl4 <- boxplot(scaled_expr_DEG_list[[4]],
main = paste0(4, " (", nrow(scaled_expr_DEG_list[[cl]]), ")"))
scaled_expr_DEG_list[[4]]
boxplot_cl4 <- boxplot(scaled_expr_DEG_list[[4]],
main = paste0(4, " (", nrow(scaled_expr_DEG_list[[4]]), ")"))
boxplot_cl4$out
View(boxplot_cl4)
View(scaled_expr_DEG_list[[cl]])
View(scaled_expr_DEG_list[[4]])
DE_A26 <- DE_test(expr = expr[meta_genes$expressed,],
cond = anno$age == "28",
ctrl = "FALSE",
covar = anno %>% dplyr::select(sex)) %>%
tibble::rownames_to_column("gene")
scores <- setNames(sign(log(DE_A26$fc)) * (-log10(DE_A26$pval)),
setNames(meta_genes$ensembl_gene_id,
meta_genes$ensembl_gene_id_version)[DE_A26$gene])
scores_ordered <- sort(scores, decreasing=T)
library(msigdbr)
genesets_celltype <- msigdbr(species = "Mus musculus", category = "C2")
genesets_celltype_list <- tapply(genesets_celltype$ensembl_gene, genesets_celltype$gs_name, list)
library(fgsea)
fgsea_kegg <- fgsea(pathways = genesets_celltype_list,
stats = scores_ordered[-1],
minSize  = 15,
maxSize  = 500)
fgsea_kegg[order(NES,decreasing=T),][1:10,]
sum(sce$discard3)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
startTime = proc.time()
# Chunk 2: load packages
suppressPackageStartupMessages(library(scuttle))
suppressPackageStartupMessages(library(scran))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(HDF5Array))
suppressPackageStartupMessages(library(hdf5r))
suppressPackageStartupMessages(library(pheatmap))
BPPARAM = BiocParallel::MulticoreParam(workers=2)
BPPARAM = BiocParallel::SerialParam()
# Chunk 3: load data
sce = readRDS("pbmc-sce.RDS")
sum(sce$discard3)
sce$discard3
df = DataFrame(sum = sce$sum,
detected = sce$detected,
mito = sce$subsets_Mito_percent,
top = sce$percent.top_100)
sce = readRDS("pbmc-sce.RDS")
setwd("~/Desktop/College/CBB/1st Semester/Statistical Bioinformatics/exercise10")
suppressPackageStartupMessages(library(scuttle))
suppressPackageStartupMessages(library(scran))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(HDF5Array))
suppressPackageStartupMessages(library(hdf5r))
suppressPackageStartupMessages(library(pheatmap))
BPPARAM = BiocParallel::MulticoreParam(workers=2)
BPPARAM = BiocParallel::SerialParam()
sce = readRDS("pbmc-sce.RDS")
sce
cd = as.data.frame(colData(sce))
ggplot(cd, aes(x=cellType)) + geom_bar() +
scale_fill_manual() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
isMito <- grepl("^mt-", rowData(sce)$Symbol, ignore.case=TRUE)
sce <- addPerCellQC(sce, subsets=list(Mito=isMito), percent_top=100,
detection_limit=0, BPPARAM=BPPARAM)
sce_detected <- sce$detected
head(sce_detected)
sce_assigned <- sce$sum
head(sce_assigned)
sce_percentage_mitochondrial <- sce$subsets_Mito_percent
head(sce_percentage_mitochondrial)
#Violin plot
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "cellType") +  ggtitle("NGSC3 QC scores"),
plotColData(sce, "sum", "Sample",
colour_by = "cellType") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "cellType")
)
#Violin plot
plotColData(sce, "sum", "Sample",
colour_by = "cellType")
#Violin plot
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "cellType")
isMito <- grepl("^mt-", rowData(sce)$Symbol, ignore.case=TRUE)
sce <- addPerCellQC(sce, subsets=list(Mito=isMito), percent_top=100,
detection_limit=0, BPPARAM=BPPARAM)
qc.lib <- isOutlier(sce$sum, log=TRUE, type="lower")
qc.nexprs <- isOutlier(sce$detected, log=TRUE, type="lower")
qc.mito <- isOutlier(sce$subsets_Mito_percent, type="higher")
qc.top <- isOutlier(sce$percent.top_100, type="higher")
discard <- qc.lib | qc.nexprs | qc.mito | qc.top
sce$discard = discard
sceFilt = sce[ , !sce$discard]
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt) >= 1) >= minCellsExpressed
sceFilt = sceFilt[isExpressed, ]
#Violin plot
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "discard") +  ggtitle("NGSC3 QC Filtered data"),
plotColData(sce, "sum", "Sample",
colour_by = "discard") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "discard")
)
qc.lib2 <- isOutlier(sce$sum, log=TRUE, type="lower", nmads = 2)
qc.nexprs2 <- isOutlier(sce$detected, log=TRUE, type="lower", nmads = 2)
qc.mito2 <- isOutlier(sce$subsets_Mito_percent, type="higher", nmads = 2)
qc.top2 <- isOutlier(sce$percent.top_100, type="higher", nmads = 2)
discard2 <- qc.lib2 | qc.nexprs2 | qc.mito2 | qc.top2
sce$discard2 = discard2
sceFilt2 = sce[ , !sce$discard2]
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt2) >= 1) >= minCellsExpressed
sceFilt2 = sceFilt2[isExpressed, ]
#Violin plots with nMADs = 2
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "discard") +  ggtitle("NGSC3 QC Filtered data stricter threshold"),
plotColData(sce, "sum", "Sample",
colour_by = "discard") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "discard")
)
df = DataFrame(sum = sce$sum,
detected = sce$detected,
mito = sce$subsets_Mito_percent,
top = sce$percent.top_100)
reasons <- perCellQCFilters(df,
sub.fields=c("sum","detected", "mito", "top"), nmads = 1)
colSums(as.matrix(reasons))
sce$discard3 = reasons$discard
sceFilt = sce[ , !sce$discard3]
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt) >= 1) >= minCellsExpressed
sceFilt = sceFilt[isExpressed, ]
#Violin plot
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "discard") +  ggtitle("NGSC3 QC Filtered data Adaptive Threshold"),
plotColData(sce, "sum", "Sample",
colour_by = "discard") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "discard")
)
sum(sce$discard3)
sum(sce$discard2)
sum(sce$discard1)
sum(sce$discard3)
sum(sce$discard2)
sum(sce$discard)
sceFilt = sce[ , !sce$discard3]
unassignedFilt_3 <- sceFilt[sceFilt$cellType == "unassigned", ]
f_unassigned_3 <- nrow(unassignedFilt_3)/nrow(sceFilt)
f_unassigned_3
qc.lib <- isOutlier(sce$sum, log=TRUE, type="lower")
qc.nexprs <- isOutlier(sce$detected, log=TRUE, type="lower")
qc.mito <- isOutlier(sce$subsets_Mito_percent, type="higher")
qc.top <- isOutlier(sce$percent.top_100, type="higher")
discard <- qc.lib | qc.nexprs | qc.mito | qc.top
sce$discard = discard
sceFilt = sce[ , !sce$discard]
unassignedFilt <- sceFilt[sceFilt$cellType == "unassigned", ]
f_unassigned <- nrow(unassignedFilt)/nrow(sceFilt)
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt) >= 1) >= minCellsExpressed
sceFilt = sceFilt[isExpressed, ]
sum(sce$discard3)
sum(sce$discard2)
sum(sce$discard)
f_unassigned
f_unassigned_2
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
startTime = proc.time()
# Chunk 2: load packages
suppressPackageStartupMessages(library(scuttle))
suppressPackageStartupMessages(library(scran))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(HDF5Array))
suppressPackageStartupMessages(library(hdf5r))
suppressPackageStartupMessages(library(pheatmap))
BPPARAM = BiocParallel::MulticoreParam(workers=2)
BPPARAM = BiocParallel::SerialParam()
# Chunk 3: load data
sce = readRDS("pbmc-sce.RDS")
sce
# Chunk 5: barplot cell types
cd = as.data.frame(colData(sce))
ggplot(cd, aes(x=cellType)) + geom_bar() +
scale_fill_manual() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Chunk 6: quality scores
isMito <- grepl("^mt-", rowData(sce)$Symbol, ignore.case=TRUE)
sce <- addPerCellQC(sce, subsets=list(Mito=isMito), percent_top=100,
detection_limit=0, BPPARAM=BPPARAM)
# Chunk 7
sce_detected <- sce$detected
head(sce_detected)
# Chunk 8
sce_assigned <- sce$sum
head(sce_assigned)
# Chunk 9
sce_percentage_mitochondrial <- sce$subsets_Mito_percent
head(sce_percentage_mitochondrial)
# Chunk 10
#Violin plot
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "cellType") +  ggtitle("NGSC3 QC scores"),
plotColData(sce, "sum", "Sample",
colour_by = "cellType") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "cellType")
)
# Chunk 11
#Violin plot
plotColData(sce, "sum", "Sample",
colour_by = "cellType")
# Chunk 12
#Violin plot
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "cellType")
# Chunk 13
plotColData(sce, "detected",  "Sample",
colour_by = "cellType")
# Chunk 15
qc.lib <- isOutlier(sce$sum, log=TRUE, type="lower")
qc.nexprs <- isOutlier(sce$detected, log=TRUE, type="lower")
qc.mito <- isOutlier(sce$subsets_Mito_percent, type="higher")
qc.top <- isOutlier(sce$percent.top_100, type="higher")
discard <- qc.lib | qc.nexprs | qc.mito | qc.top
sce$discard = discard
sceFilt = sce[ , !sce$discard]
unassignedFilt <- sceFilt[sceFilt$cellType == "unassigned", ]
f_unassigned <- nrow(unassignedFilt)/nrow(sceFilt)
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt) >= 1) >= minCellsExpressed
sceFilt = sceFilt[isExpressed, ]
# Chunk 16
#Violin plot
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "discard") +  ggtitle("NGSC3 QC Filtered data"),
plotColData(sce, "sum", "Sample",
colour_by = "discard") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "discard")
)
# Chunk 17
qc.lib2 <- isOutlier(sce$sum, log=TRUE, type="lower", nmads = 2)
qc.nexprs2 <- isOutlier(sce$detected, log=TRUE, type="lower", nmads = 2)
qc.mito2 <- isOutlier(sce$subsets_Mito_percent, type="higher", nmads = 2)
qc.top2 <- isOutlier(sce$percent.top_100, type="higher", nmads = 2)
discard2 <- qc.lib2 | qc.nexprs2 | qc.mito2 | qc.top2
sce$discard2 = discard2
sceFilt2 = sce[ , !sce$discard2]
unassignedFilt_2 <- sceFilt2[sceFilt2$cellType == "unassigned", ]
f_unassigned_2 <- nrow(unassignedFilt_2)/nrow(sceFilt)
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt2) >= 1) >= minCellsExpressed
sceFilt2 = sceFilt2[isExpressed, ]
#Violin plots with nMADs = 2
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "discard") +  ggtitle("NGSC3 QC Filtered data stricter threshold"),
plotColData(sce, "sum", "Sample",
colour_by = "discard") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "discard")
)
# Chunk 18: filter low quality cells
df = DataFrame(sum = sce$sum,
detected = sce$detected,
mito = sce$subsets_Mito_percent,
top = sce$percent.top_100)
reasons <- perCellQCFilters(df,
sub.fields=c("sum","detected", "mito", "top"), nmads = 1)
colSums(as.matrix(reasons))
sce$discard3 = reasons$discard
sceFilt = sce[ , !sce$discard3]
unassignedFilt_3 <- sceFilt[sceFilt$cellType == "unassigned", ]
f_unassigned_3 <- nrow(unassignedFilt_3)/nrow(sceFilt)
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt) >= 1) >= minCellsExpressed
sceFilt = sceFilt[isExpressed, ]
#Violin plot
gridExtra::grid.arrange(
plotColData(sce, "detected", "Sample",
colour_by = "discard") +  ggtitle("NGSC3 QC Filtered data Adaptive Threshold"),
plotColData(sce, "sum", "Sample",
colour_by = "discard") ,
plotColData(sce, "subsets_Mito_percent", "Sample",
colour_by = "discard")
)
sum(sce$discard3)
sum(sce$discard2)
sum(sce$discard)
f_unassigned
f_unassigned_2
f_unassigned_3
