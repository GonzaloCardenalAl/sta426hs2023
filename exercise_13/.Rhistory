# we aggregate again to pseudo-bulk using the new clusters
pb <- aggregateData(sce, "logcounts", by=c("cluster2"), fun="mean")
assayNames(pb) <- "logcounts"
# and we plot again the expression of the markers as a sanity check
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0)
plotTSNE(sce, colour_by="cluster2", text_by="cluster2")
saveRDS(sce, file="week13.SCE.processed.rds")
# we aggregate by cluster x sample to perform pseudo-bulk differential state analysis
sce <- muscat::prepSCE(sce, kid="cluster2", sid = "sample_id",
gid = "group_id")
pb <- aggregateData(sce)
pbMDS(pb)
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
# top genes in a given cell type
pbHeatmap(sce, res, k="astrocytes", top_n = 5)
# we extract all differentially-expressed genes:
degs <- unique(res2[res2$p_adj.loc<0.05,"gene"])
# we flatten the pb object (putting all cell types in the same assay) and calculate foldchanges
pb2 <- pbFlatten(pb)
# we add a logFC assay:
pb2 <- sechm::log2FC(pb2, fromAssay="logcpm", controls=pb2$group_id=="WT", by=pb2$cluster_id)
# we reorder
pb2 <- pb2[,order(pb2$cluster_id, pb2$group_id)]
# we plot a heatmap of the logFC of the top 200 genes across all cell types
sechm(pb2, head(degs,200), assayName="log2FC", gaps_at="cluster_id",
column_title_gp=gpar(fontsize=9))
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
res2$DE <- res2$p_adj.loc<0.05
degs <- as.data.frame(degs)
degs$astrocytes <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "astrocytes" & res2$DE == TRUE], 1, 0)
degs$endothelial <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "endothelial" & res2$DE == TRUE], 1, 0)
degs$excNeuron <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "excNeuron" & res2$DE == TRUE], 1, 0)
degs$inhNeuron <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "inhNeuron" & res2$DE == TRUE], 1, 0)
degs$microglia <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "microglia" & res2$DE == TRUE], 1, 0)
degs$oligodendro <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "oligodendro" & res2$DE == TRUE], 1, 0)
degs$OPC <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "OPC" & res2$DE == TRUE], 1, 0)
upset(degs[-1], sets = colnames(degs[-1]), order.by = "freq")
rownames(degs) <- degs$degs
degs <- degs[-1]
selected_rows <- which(degs$excNeuron == TRUE & rowSums(degs[, -which(names(degs) == "excNeuron")]) == 0)
DE_only_excNeuron <- rownames(degs[selected_rows, , drop = FALSE])
head(DE_only_excNeuron)
# we flatten the pb object (putting all cell types in the same assay) and calculate foldchanges
pb2 <- pbFlatten(pb)
# we add a logFC assay:
pb2 <- sechm::log2FC(pb2, fromAssay="logcpm", controls=pb2$group_id=="WT", by=pb2$cluster_id)
# we reorder
pb2 <- pb2[,order(pb2$cluster_id, pb2$group_id)]
# we plot a heatmap of the logFC of the top 200 genes across all cell types
sechm(pb2, head(DE_only_excNeuron), assayName="log2FC", gaps_at="cluster_id",
column_title_gp=gpar(fontsize=5))
counts <- assays(pb2)$counts
group <- factor(colnames(pb2))
y <- DGEList(counts=counts , group=group)
y <- calcNormFactors(y)
cell_types <- pb2$cluster_id
design_cell_types <- model.matrix(~cell_types)
y <- estimateDisp(y,design_cell_types)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_cell_types)
lrt_celltypes <- glmLRT(fit)
topTags(lrt_celltypes)
group <- pb2$group_id
design <- model.matrix(~group)
y <- estimateDisp(y,design)
#To perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt_treatments <- glmLRT(fit,coef=2)
topTags(lrt_treatments)
design_interaction <- model.matrix(~cell_types*group)
y <- DGEList(counts=counts , group=group)
y <- calcNormFactors(y)
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_global <- glmLRT(fit,coef=8)
topTags(lrt_global, n= Inf, p.value=0.05, adjust.method = "bonferroni")
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_excneuron <- glmLRT(fit,coef=10)
topTags(lrt_excneuron, n= Inf, p.value=0.05, adjust.method = "bonferroni")
DE_excNeuron_table <- topTags(lrt_excneuron, n= Inf, p.value=0.05, adjust.method = "bonferroni")
names_DE_excNeuron_edgeR <- rownames(DE_excNeuron_table)
which(names_DE_excNeuron_edgeR %in%  rownames(allDEgenes_excNeuron)) > 0
rownames(allDEgenes_excNeuron)
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- as.data.frame(unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
which(names_DE_excNeuron_edgeR %in%  rownames(allDEgenes_excNeuron)) > 0
which(names_DE_excNeuron_edgeR %in%  rownames(allDEgenes_excNeuron))
names_DE_excNeuron_edgeR
length()
length(names_DE_excNeuron_edgeR)
length(DE_only_excNeuron_muscat)
which(names_DE_excNeuron_edgeR == rownames(allDEgenes_excNeuron))
allDEgenes_excNeuron$`unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat))`
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- as.data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
allDEgenes_excNeuron$`unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat))`
allDEgenes_excNeuron<- allDEgenes_excNeuron%>%
mutate(edgeR = names_DE_excNeuron_edgeR %in% DE_genes)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran) # sc analysis
library(scater) # sc QC and plotting
library(batchelor) # batch correction methods
library(scDblFinder) # doublet detection
# library(sctransform) # variance-stabilizing transformation (optional)
library(muscat) # differential expression analysis
library(BiocParallel) # handling multi-threading
library(BiocNeighbors) # specifying params for kNN
library(igraph) # for manual graph clustering
library(sechm) # plotting
library(ggplot2) # plotting
library(patchwork) # to combine
library(grid)
library(UpSetR)
library("edgeR")
library(dplyr)
})
allDEgenes_excNeuron<- allDEgenes_excNeuron%>%
mutate(edgeR = names_DE_excNeuron_edgeR %in% DE_genes)
View(allDEgenes_excNeuron)
assay(pb2)$log2FC
assay(pb2)
# we flatten the pb object (putting all cell types in the same assay) and calculate foldchanges
pb2 <- pbFlatten(pb)
# we add a logFC assay:
pb2 <- sechm::log2FC(pb2, fromAssay="logcpm", controls=pb2$group_id=="WT", by=pb2$cluster_id)
# we reorder
pb2 <- pb2[,order(pb2$cluster_id, pb2$group_id)]
# we plot a heatmap of the logFC of the top 200 genes across all cell types
sechm(pb2, head(DE_only_excNeuron), assayName="log2FC", gaps_at="cluster_id",
column_title_gp=gpar(fontsize=5))
View(pb2)
assay(pb2)$log2FC
assays(pb2)$log2FC
log2FC_excNeu<- as.data.frame(assays(pb2)$log2FC)
View(log2FC_excNeu)
dim(log2FC_excNeu)
y <- DGEList(counts=counts)
y <- calcNormFactors(y)
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_global <- glmLRT(fit,coef=8)
topTags(lrt_global, n= Inf, p.value=0.05, adjust.method = "bonferroni")
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_excneuron <- glmLRT(fit,coef=10)
topTags(lrt_excneuron, n= Inf, p.value=0.05, adjust.method = "bonferroni")
y <- DGEList(counts=counts , group=group)
y <- calcNormFactors(y)
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_global <- glmLRT(fit,coef=8)
topTags(lrt_global, n= Inf, p.value=0.05, adjust.method = "bonferroni")
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_excneuron <- glmLRT(fit,coef=10)
topTags(lrt_excneuron, n= Inf, p.value=0.05, adjust.method = "bonferroni")
log2FC_excNeu<- as.data.frame(assays(pb2)$log2FC[21:24])
log2FC_excNeu<- as.data.frame(assays(pb2)$log2FC[21:24,])
log2FC_excNeu<- as.data.frame(assays(pb2)$log2FC[,21:24])
log2FC_excNeu<- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
?vennCounts()
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
allDEgenes_excNeuron$edgeR <- which(names_DE_excNeuron_edgeR == rownames(allDEgenes_excNeuron))
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
allDEgenes_excNeuron$edgeR <- which(names_DE_excNeuron_edgeR == allDEgenes_excNeuron$DE_genes))
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
allDEgenes_excNeuron$edgeR <- which(names_DE_excNeuron_edgeR == allDEgenes_excNeuron$DE_genes)
allDEgenes_excNeuron$edgeR <- allDEgenes_excNeuron$DE_genes %in% names_DE_excNeuron_edgeR
View(allDEgenes_excNeuron)
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
allDEgenes_excNeuron$edgeR <- allDEgenes_excNeuron$DE_genes %in% names_DE_excNeuron_edgeR
allDEgenes_excNeuron$muscat <- allDEgenes_excNeuron$DE_genes %in% DE_only_excNeuron_muscat
vennDiagram(allDEgenes_excNeuron[-1])
lrt_excneuron$AveLogCPM
topTags(lrt_excneuron, n= Inf)
topTags(lrt_excneuron, n= Inf)$logFC
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
logFC_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)
View(logFC_excNeu_edgeR)
logFC_excNeu_edgeR$table
table(logFC_excNeu_edgeR)$logFC
topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- table_excNeu_edgeR$logFC
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- table_excNeu_edgeR$logFC
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- as.data.frame(table_excNeu_edgeR$logFC)
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- data.frame(logFC = table_excNeu_edgeR$logFC)
logFC <- data.frame(edgeR = logFC_excNeu_edgeR, muscat = logFC_excNeu_muscat)
ggplot(logFC, aes(x = edgeR, y = muscat, color = factor(method1))) +
geom_point() +
labs(title = "Scatter Plot of Log-Fold Changes",
x = "EdgeR",
y = "Muscat",
color = "Method 1") +
theme_minimal()
View(logFC)
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- data.frame(logFC = table_excNeu_edgeR$logFC)
logFC <- data.frame(edgeR = logFC_excNeu_edgeR$logFC, muscat = logFC_excNeu_muscat$`rowMeans(assays(pb2)$log2FC[, 21:24])`)
ggplot(logFC, aes(x = edgeR, y = muscat, color = factor(method1))) +
geom_point() +
labs(title = "Scatter Plot of Log-Fold Changes",
x = "EdgeR",
y = "Muscat",
color = "Method 1") +
theme_minimal()
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- data.frame(logFC = table_excNeu_edgeR$logFC)
logFC <- data.frame(edgeR = logFC_excNeu_edgeR$logFC, muscat = logFC_excNeu_muscat$`rowMeans(assays(pb2)$log2FC[, 21:24])`)
ggplot(logFC, aes(x = edgeR, y = muscat, color = factor(method1))) +
geom_point() +
labs(title = "Scatter Plot of Log-Fold Changes",
x = "EdgeR",
y = "Muscat") +
theme_minimal()
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- data.frame(logFC = table_excNeu_edgeR$logFC)
logFC <- data.frame(edgeR = logFC_excNeu_edgeR$logFC, muscat = logFC_excNeu_muscat$`rowMeans(assays(pb2)$log2FC[, 21:24])`)
ggplot(logFC, aes(x = edgeR, y = muscat)) +
geom_point() +
labs(title = "Scatter Plot of Log-Fold Changes",
x = "EdgeR",
y = "Muscat") +
theme_minimal()
logFC_excNeu_muscat <- as.data.frame(rowMeans(assays(pb2)$log2FC[,21:24]))
table_excNeu_edgeR <- topTags(lrt_excneuron, n= Inf)$table
logFC_excNeu_edgeR <- data.frame(logFC = table_excNeu_edgeR$logFC)
logFC <- data.frame(edgeR = logFC_excNeu_edgeR$logFC, muscat = logFC_excNeu_muscat$`rowMeans(assays(pb2)$log2FC[, 21:24])`)
ggplot(logFC, aes(x = edgeR, y = muscat)) +
geom_point() +
labs(title = "Scatter Plot of Log-Fold Changes",
x = "EdgeR",
y = "Muscat") +
theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed")
logFC_excNeu_edgeR
assays(pb2)
assays(pb2)$log2FC
assays(pb2)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran) # sc analysis
library(scater) # sc QC and plotting
library(batchelor) # batch correction methods
library(scDblFinder) # doublet detection
# library(sctransform) # variance-stabilizing transformation (optional)
library(muscat) # differential expression analysis
library(BiocParallel) # handling multi-threading
library(BiocNeighbors) # specifying params for kNN
library(igraph) # for manual graph clustering
library(sechm) # plotting
library(ggplot2) # plotting
library(patchwork) # to combine
library(grid)
library(UpSetR)
library("edgeR")
library(dplyr)
})
sce <- readRDS("week13.SCE.rds")
dim(sce)
table(sce$sample_id, sce$group_id)
mito <- grep("mt-", rownames(sce), value = TRUE)
head(mito)
# get QC metrics:
sce <- addPerCellQC(sce, subsets=list(Mt=mito), percent.top=c(5,10))
sce <- addPerFeatureQC(sce)
# we plot some of the metrics
qc <- as.data.frame(colData(sce))
ggplot(qc, aes(subsets_Mt_percent)) + geom_histogram() + facet_wrap(~sample_id)
ggplot(qc, aes(log10(sum))) + geom_histogram() + facet_wrap(~sample_id)
ggplot(qc, aes(log10(sum), log10(detected))) + geom_point() + geom_density2d()
# we set thresholds on the library sizes and detection rate:
sce$qc.out <- isOutlier(log(sce$sum),nmads=3,batch=sce$sample_id) |
isOutlier(log(sce$detected),nmads=3,batch=sce$sample_id)
# a fancier job would be accomplished by https://github.com/wmacnair/SampleQC
table(sce$qc.out)
# get rid of seldom detected genes
sce <- sce[rowData(sce)$detected>=4,]
# we flag doublets: doublets are droplets that capture more than one cell and this might be a problem when it captures more than one cell-type
sce <- scDblFinder(sce, samples="sample_id", BPPARAM=MulticoreParam(6))
table(sce$scDblFinder.class)
# (fast) standard log-normalization
sce <- logNormCounts(sce)
# get high-variable genes (normally we'd take 3000, here we'll go skim for speed)
hvg <- getTopHVGs(sce, n=1000)
# alternative: variance-stabilizing transformation
# vst <- suppressWarnings(sctransform::vst(counts(sce)))
# logcounts(sce) <- vst$y
# # get highly-variable genes
# hvg <- row.names(sce)[order(vst$gene_attr$residual_variance,
#                             decreasing=TRUE)[1:1000]]
# run PCA
sce <- runPCA(sce, ncomponents=50, subset_row=hvg)
#How many componentes do you take? before the used the elbo, but it is not a good way to proceed.
# check the variance explained by the PCs:
pc.var <- attr(reducedDim(sce),"percentVar")
plot(pc.var, xlab="PCs", ylab="% variance explained")
# restrict to the first 20 components:
reducedDim(sce) <- reducedDim(sce)[,1:20]
# run and plot 2d projections based on the PCA
# to improve performance, use Annoy kNN approximation:
sce <- runTSNE(sce, dimred="PCA", BNPARAM=AnnoyParam())
sce <- runUMAP(sce, dimred="PCA", n_neighbors=30, BNPARAM=AnnoyParam())
# you can compare the 2d embeddings:
# sleepwalk::sleepwalk( as.list(reducedDims(sce)[c("TSNE","UMAP")]),
#                       featureMatrices=reducedDims(sce)[["PCA"]] )
#it is an impossible task to do not introduce distorsions in these methods of dimensionality reduction.  Because to perserve the neighbours of one cell, you need to disturb the others.
# plot by doublet score
plotUMAP(sce, colour_by="scDblFinder.score") +
plotTSNE(sce, colour_by="scDblFinder.score") +
plot_layout(guides = "collect")
# filter out bad cells
sce <- sce[,sce$scDblFinder.class!="doublet" & !sce$qc.out]
# check mixing:
plotTSNE(sce, colour_by="group_id") +
plotTSNE(sce, colour_by="sample_id") +
plot_layout(guides = "collect")
# BiocNeighbors
g <- buildKNNGraph(sce, BNPARAM=AnnoyParam(), use.dimred="PCA", k=30)
sce$cluster <- as.factor(cluster_leiden(g, objective_function="modularity",
n_iterations=20)$membership)
table(sce$cluster)
# we could play with the `resolution_parameter` of `cluster_leiden`
# to decide on the granularity
plotTSNE(sce, colour_by="cluster", text_by="cluster") +
plotUMAP(sce, colour_by="cluster", text_by="cluster")
ca <- table(cluster=sce$cluster, sample=sce$sample_id)
ggplot(as.data.frame(ca), aes(reorder(sample), cluster, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_viridis_c()
# we identify genes that differ between clusters:
mm <- scran::findMarkers(sce, groups=sce$cluster, test.type="binom",
BPPARAM=MulticoreParam(6))
# we select the top 5 markers by cluster:
markers <- unique(unlist(lapply(mm, FUN=function(x){
head(row.names(x[x$FDR<0.01,]),5)
})))
genes <- list(
astrocytes = c("Aqp4", "Gfap", "Fgfr3","Dio2"),
endothelial = c("Cldn5","Nostrin","Flt1"),
microglia = c("C1qb","Tyrobp","P2ry12", "Csf1r"),
neuronal = c("Snap25", "Stmn2", "Syn1", "Rbfox3"),
excNeuron = c("Slc17a7","Camk2a","Grin2b","Fezf2"),
inhNeuron = c("Gad1","Lhx6","Adarb2"),
oligodendro = c("Opalin","Plp1","Mag","Mog"),
OPC = c("Pdgfra","Sox6","Bcan")
)
# since the row.names of the object have also the ensembl id, we find the matching row names for each gene:
km <- lapply(genes, FUN=function(g) grep(paste0(g, "$", collapse="|"), rownames(sce), value=TRUE))
# muscat
# mean logcounts by cluster:
pb <- aggregateData(sce, "logcounts", by=c("cluster"), fun="mean")
assayNames(pb) <- "logcounts"
assays(pb)$propOfMax <- exp(logcounts(pb))/rowMaxs(exp(logcounts(pb)))
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0) +
sechm(pb, c(unlist(km)), assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# heatmap for the de-novo markers:
sechm(pb, markers, assayName = "propOfMax", show_colnames=TRUE,
do.scale=FALSE, hmcols=viridis::viridis(100),
row_names_gp=gpar(fontsize=9))
# we get rid of the unspecific neuronal markers:
km2 <- km[names(km)!="neuronal"]
# we extract the pseudo-bulk counts of the markers for each cluster
mat <- assay(pb)[unlist(km2),]
# we aggregate across markers of the same type
mat <- aggregate(t(scale(t(mat))),
by=list(type=rep(names(km2), lengths(km2))),
FUN=sum)
# for each column (cluster), we select the row (cell type) which has the maximum aggregated value
cl2 <- mat[,1][apply(mat[,-1], 2, FUN=which.max)]
# we convert the cells' cluster labels to cell type labels:
sce$cluster2 <- cl2[sce$cluster]
table(sce$cluster, sce$cluster2)
plotUMAP(sce, colour_by="cluster2", text_by="cluster2")
# we aggregate again to pseudo-bulk using the new clusters
pb <- aggregateData(sce, "logcounts", by=c("cluster2"), fun="mean")
assayNames(pb) <- "logcounts"
# and we plot again the expression of the markers as a sanity check
rowData(pb)$marker4 <- NA
rowData(pb)[unlist(km),"marker4"] <- rep(names(km),lengths(km))
sechm(pb, c(unlist(km)), assayName="logcounts", gaps_row="marker4",
show_colnames=TRUE, do.scale=TRUE, breaks=1, row_title_rot=0)
plotTSNE(sce, colour_by="cluster2", text_by="cluster2")
saveRDS(sce, file="week13.SCE.processed.rds")
# we aggregate by cluster x sample to perform pseudo-bulk differential state analysis
sce <- muscat::prepSCE(sce, kid="cluster2", sid = "sample_id",
gid = "group_id")
pb <- aggregateData(sce)
pbMDS(pb)
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
# top genes in a given cell type
pbHeatmap(sce, res, k="astrocytes", top_n = 5)
# we extract all differentially-expressed genes:
degs <- unique(res2[res2$p_adj.loc<0.05,"gene"])
# we flatten the pb object (putting all cell types in the same assay) and calculate foldchanges
pb2 <- pbFlatten(pb)
# we add a logFC assay:
pb2 <- sechm::log2FC(pb2, fromAssay="logcpm", controls=pb2$group_id=="WT", by=pb2$cluster_id)
# we reorder
pb2 <- pb2[,order(pb2$cluster_id, pb2$group_id)]
# we plot a heatmap of the logFC of the top 200 genes across all cell types
sechm(pb2, head(degs,200), assayName="log2FC", gaps_at="cluster_id",
column_title_gp=gpar(fontsize=9))
# we run edgeR on each cluster and extract the results
res <- pbDS(pb)
res2 <- dplyr::bind_rows(res$table[[1]])
# volcano plots
ggplot(res2, aes(logFC, -log10(p_adj.loc), colour=p_adj.loc<0.05)) + geom_point() + facet_wrap(~cluster_id)
res2$DE <- res2$p_adj.loc<0.05
degs <- as.data.frame(degs)
degs$astrocytes <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "astrocytes" & res2$DE == TRUE], 1, 0)
degs$endothelial <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "endothelial" & res2$DE == TRUE], 1, 0)
degs$excNeuron <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "excNeuron" & res2$DE == TRUE], 1, 0)
degs$inhNeuron <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "inhNeuron" & res2$DE == TRUE], 1, 0)
degs$microglia <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "microglia" & res2$DE == TRUE], 1, 0)
degs$oligodendro <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "oligodendro" & res2$DE == TRUE], 1, 0)
degs$OPC <- ifelse(degs$degs %in% res2$gene[res2$cluster_id == "OPC" & res2$DE == TRUE], 1, 0)
upset(degs[-1], sets = colnames(degs[-1]), order.by = "freq")
rownames(degs) <- degs$degs
degs <- degs[-1]
selected_rows <- which(degs$excNeuron == TRUE & rowSums(degs[, -which(names(degs) == "excNeuron")]) == 0)
DE_only_excNeuron <- rownames(degs[selected_rows, , drop = FALSE])
head(DE_only_excNeuron)
# we flatten the pb object (putting all cell types in the same assay) and calculate foldchanges
pb2 <- pbFlatten(pb)
# we add a logFC assay:
pb2 <- sechm::log2FC(pb2, fromAssay="logcpm", controls=pb2$group_id=="WT", by=pb2$cluster_id)
# we reorder
pb2 <- pb2[,order(pb2$cluster_id, pb2$group_id)]
sechm(pb2, head(DE_only_excNeuron), assayName="log2FC", gaps_at="cluster_id",
column_title_gp=gpar(fontsize=5))
counts <- assays(pb2)$counts
group <- factor(colnames(pb2))
y <- DGEList(counts=counts , group=group)
y <- calcNormFactors(y)
cell_types <- pb2$cluster_id
design_cell_types <- model.matrix(~cell_types)
y <- estimateDisp(y,design_cell_types)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_cell_types)
lrt_celltypes <- glmLRT(fit)
topTags(lrt_celltypes)
group <- pb2$group_id
design <- model.matrix(~group)
y <- estimateDisp(y,design)
#To perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt_treatments <- glmLRT(fit,coef=2)
topTags(lrt_treatments)
design_interaction <- model.matrix(~cell_types*group)
y <- DGEList(counts=counts , group=group)
y <- calcNormFactors(y)
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_global <- glmLRT(fit,coef=8)
topTags(lrt_global, n= Inf, p.value=0.05, adjust.method = "bonferroni")
y <- estimateDisp(y,design_interaction)
#To perform likelihood ratio tests:
fit <- glmFit(y,design_interaction)
lrt_excneuron <- glmLRT(fit,coef=10)
topTags(lrt_excneuron, n= Inf, p.value=0.05, adjust.method = "bonferroni")
DE_excNeuron_table <- topTags(lrt_excneuron, n= Inf, p.value=0.05, adjust.method = "bonferroni")
names_DE_excNeuron_edgeR <- rownames(DE_excNeuron_table)
DE_only_excNeuron_muscat <- DE_only_excNeuron
allDEgenes_excNeuron <- data.frame(DE_genes = unique(union(names_DE_excNeuron_edgeR, DE_only_excNeuron_muscat)))
allDEgenes_excNeuron$edgeR <- allDEgenes_excNeuron$DE_genes %in% names_DE_excNeuron_edgeR
allDEgenes_excNeuron$muscat <- allDEgenes_excNeuron$DE_genes %in% DE_only_excNeuron_muscat
vennDiagram(allDEgenes_excNeuron[-1])
