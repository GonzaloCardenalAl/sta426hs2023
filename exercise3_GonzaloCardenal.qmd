---
title: "Exercise 3"
author: "Gonzalo Cardenal Antolin"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

> ***Exploratory Data Analysis:*** Do an exploratory data analysis of a matrix of expression values. The data consists of expression values for samples that were treated with DMSO and TSA. The samples were measured using three technologies: bulk, IFC96, IFC800. See the two RDS files `counts.RDS` and `phenodata.RDS`.

> The experiment has two experimental factors "Treatment" and "Technology". Treatment has two levels, Technology has three levels. Samples that have the same combination of Treatment & Technology are replicates.

## Package Import

```{r}
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(pheatmap)
```

## Data Import

```{r}
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
```

## Question 1:Compute and visualize basic statistics on the experimental design

*How many replicates are there for each combination of factor levels?*

We count the number of replicates in the phenotype data. We will use the library `dplyr` to manage the dataframes

```{r}
annodf <- as.data.frame(anno)
annodf <- annodf %>% rowwise() %>% 
  mutate(SUM = paste(Technology,Treatment))
nreplicates <- annodf %>% group_by(SUM) %>% count()
nreplicates
```

In the table above we can observe the replicates for each combination of factor levels.

*Are there systematic differences between the samples in the different conditions (treatment & technology)* We will answer that question after visualizing the requested statistics

*How many genes have an expression value above 0 in each sample?/ Number of detected genes per sample*

To check for the number of genes identified in each sample with keep the ones with value non-zero:

```{r}
dtgenes <- as.data.frame(x) 
genesxsample=apply(dtgenes, 2, function(i) sum(i != 0)) #iterate through the columns and adds the values who are true for each
annodf['n_genes'] <- genesxsample
par(mar=c(4,9,2,9)+.1) #changing the margins of the figure
barplot(height=annodf$n_genes, names=annodf$SUM, ,main="Number of genes per sample", xlab="nº total genes",col="#69b3a2", horiz=T , las=1)
```

*Total sum of counts per sample*

Now we count for the total number of reads per sample

```{r}
readsxsample=apply(dtgenes, 2, sum)
annodf['n_reads'] = readsxsample
par(mar=c(4,9,2,9)+.1) #changing the margins of the figure
barplot(height=annodf$n_reads, names=annodf$SUM,main="Number of reads per sample", xlab="nº total reads",col="#69b3a2", horiz=T , las=1)
```

*Color the samples by the experimental condition*

Now we repeat the plots but colored them

```{r}
annodfordered<-annodf[order(annodf$SUM),]
annodfordered$index <- 1:dim(annodf)[1]
colored_genes_plot <- ggplot(annodfordered, aes(x=index, y=n_genes, fill= SUM))+
                               geom_bar(stat= 'identity') +
                               labs(title= "Number of genes detected per sample", x='Sample', y='nº genes')+
                                guides(fill=guide_legend(title='Experiment Condition'))+
                                theme(plot.title = element_text(hjust = 0.5))
  

print(colored_genes_plot)
  
colored_reads_plot <- ggplot(annodfordered, aes(x=index, y=n_reads, fill= SUM))+
                               geom_bar(stat= 'identity') +
                               labs(title= "Number of reads detected per sample", x='Sample', y='nº reads')+
                                guides(fill=guide_legend(title='Experiment Condition'))+
                                theme(plot.title = element_text(hjust = 0.5))
  

print(colored_reads_plot)
```

We plot the number of reads in logaritmic scale to be able to visualize all the conditions better

```{r}
annodfordered['log_reads'] <-log(annodfordered['n_reads'])
colored_logreads_plot <- ggplot(annodfordered, aes(x=index, y=log_reads, fill= SUM))+
                               geom_bar(stat= 'identity') +
                               labs(title= "Number of reads detected per sample in log scale", x='Sample', y='log(nº reads)')+
                                guides(fill=guide_legend(title='Experiment Condition'))+
                                theme(plot.title = element_text(hjust = 0.5))
  

print(colored_logreads_plot)
```

After looking at these plots, we can can observe that the technology bulk generates much more reads and values of gene expression than the other two.

## Question 2:Normalize the data

*Scale the columns so that the total sum of all columns are identical*

```{r}
median_all_counts = median(annodf$n_reads)
scaling_factors = median(annodf$n_reads)/annodf$n_reads
normalised_x=sweep(x, 2, scaling_factors, `*`)
readsxsamplenorm = apply(normalised_x, 2, function(i) sum(i))
annodf['n_reads_norm'] = readsxsamplenorm
annodf2<-annodf[order(annodf$SUM),]
annodf2$index <- 1:dim(annodf2)[1]
par(mar=c(4,9,2,9)+.1) #changing the margins of the figure
colored_reads_plot <- ggplot(annodf2, aes(x=index, y=n_reads_norm, fill= SUM))+
                               geom_bar(stat= 'identity') +
                               labs(title= "Number of reads detected per sample", x='Sample', y='nº reads')+
                                guides(fill=guide_legend(title='Experiment Condition'))+
                                theme(plot.title = element_text(hjust = 0.5))
  

print(colored_reads_plot)
```

## Question 3: Transform the data to log-scale

*Use the function `log1p` to transform the data to log-scale*

```{r}
log_normalised_x=log1p(normalised_x)
```

## Question 4: Visualize the distribution of the expression values

*Use violin plots and boxplots to visualize the distribution of the expression values. Aggregate the replicates in the same experimental group into one average sample, and plot the averaged sample. Color by experimental factors.*

We first create the dataframe with all the data

```{r}
log_normalised_x <- tibble::rownames_to_column(as.data.frame(log_normalised_x), "Gene_ID")
x_data <-log_normalised_x %>% gather(experiment, log_gene_expression, 2:87)
x_data['exp_condition'] <- rep(annodf$SUM, each=dim(x)[1])
x_data['all']<- rep('all', dim(x_data)[1])
```

Then we plot the gene expression distribution over all samples with violin plot and boxplot.

```{r}
violin_plot_allgenes <- ggplot(x_data, aes(x=all, y=log_gene_expression)) +
  geom_violin() +
  labs(title='Violoin Plot of all samples Gene Log Expression Distribution', x='samples',y='Log expression')
  theme(plot.title = element_text(hjust = 0.5))

print(violin_plot_allgenes)

box_plot_allgenes <- ggplot(x_data, aes(x=all, y=log_gene_expression)) +
  geom_boxplot() +
  labs(title='Violoin Plot of all samples Gene Log Expression Distribution', x='samples',y='Log expression')
  theme(plot.title = element_text(hjust = 0.5))

print(box_plot_allgenes)
```

Now we plot the gene expression of each experimental group averaged

```{r}

avg_df <- aggregate(log_gene_expression ~ Gene_ID + exp_condition, data=x_data, FUN=mean)
  
violin_plot_eachcondition <- ggplot(avg_df, aes(x=exp_condition, y=log_gene_expression, fill=exp_condition)) +
  geom_violin() +
  labs(title='Violoin Plot of all samples Gene Log Expression Distribution', x='Experimental Conditions',y='Log averaged expression')
  theme(plot.title = element_text(hjust = 0.5))

print(violin_plot_eachcondition)

box_plot_eachcondition <- ggplot(avg_df, aes(x=exp_condition, y=log_gene_expression, fill=exp_condition)) +
  geom_boxplot() +
  labs(title='Box Plot of all samples Gene Log Expression Distribution', x='Experimental Conditions',y='Log averaged expression')
  theme(plot.title = element_text(hjust = 0.5))

print(box_plot_eachcondition)
```

## Question 5:Most variable genes

*Identify the 500 most variable genes (with largest variance across samples) and continue working with those.*

```{r}
vardf <- log_normalised_x %>%
  rowwise() %>%
  mutate(variance = var(c_across(-1)))
var500 <- vardf[order(-vardf$variance),] %>%
  head(500)
head(var500$variance)
```

## Question 6:Sample correlations

*Compute and visualize the sample-to-sample correlations*

```{r}
columns_to_exclude <- c("Gene_ID", "variance")
correlation_matrix <- cor(var500[,! names(var500) %in% columns_to_exclude])
pheatmap(correlation_matrix, fontsize = 3)
```

We also perform these steps across the different experimental conditions with the average, to compute the experimetal-conditions-to-experimental-conditions correlation

```{r}
avg_df <- avg_df %>% spread(exp_condition, log_gene_expression)
vardfexps <- avg_df %>%
  rowwise() %>%
  mutate(variance = var(c_across(-1)))

var500exps <- vardfexps[order(-vardfexps$variance),] %>%
  head(500)
columns_to_exclude <- c("Gene_ID", "variance")
correlation_matrix_exps <- cor(var500exps[,! names(var500exps) %in% columns_to_exclude])
pheatmap(correlation_matrix_exps)
```

## Question 7:Clustering

*Compute and visualize a hierarchical clustering of the samples, use the method `hclust`.*

```{r}
dissimilarity_corr = as.dist(1 - correlation_matrix)
HC <- hclust(dissimilarity_corr, method = "average")
plot(HC, main="Hierarchical Clustering Dendrogram", cex=0.2, sub='')
```

## Question 8:Heatmap

*Use the package `pheatmap` to generate a heatmap of the expression data.*

```{r}
pheatmap(var500[,! names(var500) %in% columns_to_exclude], show_rownames = FALSE, treeheight_row = 100, treeheight_col = 100, fontsize = 3)
```
